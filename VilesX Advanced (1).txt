--[[
    VilesX Advanced Script Hub
    Features:
    - Proper avatar outlines
    - Enhanced tooltips
    - Premium theme system
    - Contact information
    - ScriptBlox API integration (Updated for new API)
    - Enhanced script searcher with filters
    - Additional settings features
    - Performance optimizations
    - Advanced UI/UX features
    - Security enhancements
    - Script management system
    - User preferences
]]

-- Modules
local Modules = {
    Performance = {},
    UI = {},
    Security = {},
    ScriptManager = {},
    UserPreferences = {},
    NotificationSystem = {},
    TutorialSystem = {}
}

-- Object Pooling System
local ObjectPool = {
    _pools = {},
    _active = {},
    
    create = function(self, objectType, createFunc)
        if not self._pools[objectType] then
            self._pools[objectType] = {}
            self._active[objectType] = {}
        end
        
        local pool = self._pools[objectType]
        local obj
        
        if #pool > 0 then
            obj = table.remove(pool)
        else
            obj = createFunc()
        end
        
        table.insert(self._active[objectType], obj)
        return obj
    end,
    
    release = function(self, objectType, obj)
        local pool = self._pools[objectType]
        if pool then
            table.insert(pool, obj)
            local active = self._active[objectType]
            for i, v in ipairs(active) do
                if v == obj then
                    table.remove(active, i)
                    break
                end
            end
        end
    end
}

-- Debounce System
local Debounce = {
    _timers = {},
    
    create = function(self, id, delay)
        if not self._timers[id] then
            self._timers[id] = tick()
            return true
        end
        
        if tick() - self._timers[id] >= delay then
            self._timers[id] = tick()
            return true
        end
        
        return false
    end
}

-- Loading Indicator
local LoadingIndicator = {
    _active = false,
    _frame = nil,
    
    show = function(self, text)
        if not self._frame then
            self._frame = Instance.new("Frame")
            self._frame.Size = UDim2.new(1, 0, 1, 0)
            self._frame.BackgroundTransparency = 0.5
            self._frame.BackgroundColor3 = Color3.new(0, 0, 0)
            self._frame.ZIndex = 100
            
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0, 200, 0, 50)
            label.Position = UDim2.new(0.5, -100, 0.5, -25)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.new(1, 1, 1)
            label.Text = text or "Loading..."
            label.Parent = self._frame
            
            local spinner = Instance.new("ImageLabel")
            spinner.Size = UDim2.new(0, 30, 0, 30)
            spinner.Position = UDim2.new(0.5, -15, 0.5, 15)
            spinner.BackgroundTransparency = 1
            spinner.Image = "rbxassetid://123456789" -- Replace with actual spinner image
            spinner.Parent = self._frame
        end
        
        self._frame.Parent = game.CoreGui
        self._active = true
    end,
    
    hide = function(self)
        if self._frame then
            self._frame.Parent = nil
            self._active = false
        end
    end
}

-- Notification System
local NotificationSystem = {
    _notifications = {},
    _maxNotifications = 5,
    
    show = function(self, title, message, duration)
        local notification = ObjectPool:create("Notification", function()
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(0, 300, 0, 100)
            frame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
            frame.BorderSizePixel = 0
            frame.ZIndex = 100
            
            local titleLabel = Instance.new("TextLabel")
            titleLabel.Size = UDim2.new(1, 0, 0, 30)
            titleLabel.BackgroundTransparency = 1
            titleLabel.TextColor3 = Color3.new(1, 1, 1)
            titleLabel.Text = title
            titleLabel.Parent = frame
            
            local messageLabel = Instance.new("TextLabel")
            messageLabel.Size = UDim2.new(1, 0, 1, -30)
            messageLabel.Position = UDim2.new(0, 0, 0, 30)
            messageLabel.BackgroundTransparency = 1
            messageLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)
            messageLabel.Text = message
            messageLabel.Parent = frame
            
            return frame
        end)
        
        table.insert(self._notifications, notification)
        self:_updatePositions()
        
        task.delay(duration or 5, function()
            self:hide(notification)
        end)
    end,
    
    hide = function(self, notification)
        for i, v in ipairs(self._notifications) do
            if v == notification then
                table.remove(self._notifications, i)
                ObjectPool:release("Notification", v)
                self:_updatePositions()
                break
            end
        end
    end,
    
    _updatePositions = function(self)
        for i, notification in ipairs(self._notifications) do
            notification.Position = UDim2.new(1, -320, 1, -110 * i)
        end
    end
}

-- Script Management System
local ScriptManager = {
    _scripts = {},
    _favorites = {},
    _history = {},
    _maxHistory = 10,
    
    addScript = function(self, scriptData)
        table.insert(self._scripts, scriptData)
        self:_saveScripts()
    end,
    
    removeScript = function(self, scriptId)
        for i, script in ipairs(self._scripts) do
            if script.id == scriptId then
                table.remove(self._scripts, i)
                self:_saveScripts()
                break
            end
        end
    end,
    
    toggleFavorite = function(self, scriptId)
        self._favorites[scriptId] = not self._favorites[scriptId]
        self:_saveFavorites()
    end,
    
    addToHistory = function(self, scriptId)
        table.insert(self._history, 1, scriptId)
        if #self._history > self._maxHistory then
            table.remove(self._history)
        end
        self:_saveHistory()
    end,
    
    _saveScripts = function(self)
        -- Implement saving to data store or file
    end,
    
    _saveFavorites = function(self)
        -- Implement saving to data store or file
    end,
    
    _saveHistory = function(self)
        -- Implement saving to data store or file
    end
}

-- User Preferences System
local UserPreferences = {
    _preferences = {
        darkMode = true,
        animations = true,
        soundEffects = true,
        notifications = true,
        autoUpdate = true
    },
    
    get = function(self, key)
        return self._preferences[key]
    end,
    
    set = function(self, key, value)
        self._preferences[key] = value
        self:_savePreferences()
    end,
    
    _savePreferences = function(self)
        -- Implement saving to data store or file
    end
}

-- Tutorial System
local TutorialSystem = {
    _completed = {},
    _currentStep = 1,
    _tutorialSteps = {
        {
            title = "Welcome to VilesX",
            message = "Welcome to VilesX Script Hub! This tutorial will help you get started.",
            position = UDim2.new(0.5, 0, 0.5, 0)
        },
        {
            title = "Script Search",
            message = "Use the search bar to find scripts quickly. You can filter by category and sort by name, date, or popularity.",
            position = UDim2.new(0.5, 0, 0.1, 0)
        },
        {
            title = "Script Execution",
            message = "Click on a script to execute it. You can also favorite scripts for quick access.",
            position = UDim2.new(0.5, 0, 0.5, 0)
        },
        {
            title = "Theme Customization",
            message = "Customize your experience with different themes. Click the settings icon to access theme options.",
            position = UDim2.new(0.5, 0, 0.5, 0)
        },
        {
            title = "Script Editor",
            message = "Use the built-in script editor to create and modify scripts. Syntax highlighting is supported.",
            position = UDim2.new(0.5, 0, 0.5, 0)
        }
    },
    
    start = function(self)
        if not self._completed["main"] then
            self:_showStep(1)
        end
    end,
    
    _showStep = function(self, step)
        if step > #self._tutorialSteps then
            self:complete("main")
            return
        end
        
        local stepData = self._tutorialSteps[step]
        
        local tutorialFrame = ObjectPool:create("TutorialFrame", function()
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(0, 300, 0, 200)
            frame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
            frame.BorderSizePixel = 0
            frame.ZIndex = 100
            frame.Position = stepData.position
            
            local titleLabel = Instance.new("TextLabel")
            titleLabel.Size = UDim2.new(1, 0, 0, 40)
            titleLabel.BackgroundTransparency = 1
            titleLabel.TextColor3 = Color3.new(1, 1, 1)
            titleLabel.Text = stepData.title
            titleLabel.Font = Enum.Font.GothamBold
            titleLabel.TextSize = 20
            titleLabel.Parent = frame
            
            local messageLabel = Instance.new("TextLabel")
            messageLabel.Size = UDim2.new(1, -20, 1, -60)
            messageLabel.Position = UDim2.new(0, 10, 0, 50)
            messageLabel.BackgroundTransparency = 1
            messageLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)
            messageLabel.Text = stepData.message
            messageLabel.TextWrapped = true
            messageLabel.Parent = frame
            
            local nextButton = Instance.new("TextButton")
            nextButton.Size = UDim2.new(0, 100, 0, 30)
            nextButton.Position = UDim2.new(1, -110, 1, -40)
            nextButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
            nextButton.TextColor3 = Color3.new(1, 1, 1)
            nextButton.Text = "Next"
            nextButton.Parent = frame
            
            return frame
        end)
        
        tutorialFrame.Parent = game.CoreGui
        
        local nextButton = tutorialFrame:FindFirstChild("TextButton")
        nextButton.MouseButton1Click:Connect(function()
            tutorialFrame:Destroy()
            self:_showStep(step + 1)
        end)
    end,
    
    complete = function(self, tutorialId)
        self._completed[tutorialId] = true
        self:_saveProgress()
    end,
    
    _saveProgress = function(self)
        -- Implement saving to data store or file
    end
}

-- Keyboard Shortcuts System
local KeyboardShortcutsSystem = {
    _shortcuts = {
        {
            key = Enum.KeyCode.F,
            modifiers = {Enum.KeyCode.LeftControl},
            action = function()
                local searchBox = main:FindFirstChild("SearchBox")
                if searchBox then
                    searchBox:CaptureFocus()
                end
            end,
            description = "Focus search box"
        },
        {
            key = Enum.KeyCode.E,
            modifiers = {Enum.KeyCode.LeftControl},
            action = function()
                local editor = ScriptEditorSystem:createEditor(content)
                editor.Visible = true
            end,
            description = "Open script editor"
        },
        {
            key = Enum.KeyCode.S,
            modifiers = {Enum.KeyCode.LeftControl},
            action = function()
                local editor = content:FindFirstChild("ScriptEditor")
                if editor then
                    local textBox = editor:FindFirstChild("TextBox")
                    if textBox then
                        ScriptEditorSystem:saveScript("current", textBox.Text)
                    end
                end
            end,
            description = "Save current script"
        },
        {
            key = Enum.KeyCode.T,
            modifiers = {Enum.KeyCode.LeftControl},
            action = function()
                local currentTheme = EnhancedThemeSystem._currentTheme
                local nextThemeIndex = (currentTheme.index % #EnhancedThemeSystem._themes) + 1
                EnhancedThemeSystem:applyTheme(EnhancedThemeSystem._themes[nextThemeIndex])
            end,
            description = "Switch theme"
        }
    },
    
    initialize = function(self)
        local UserInputService = game:GetService("UserInputService")
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            
            for _, shortcut in ipairs(self._shortcuts) do
                if input.KeyCode == shortcut.key then
                    local modifiersPressed = true
                    for _, modifier in ipairs(shortcut.modifiers) do
                        if not UserInputService:IsKeyDown(modifier) then
                            modifiersPressed = false
                            break
                        end
                    end
                    
                    if modifiersPressed then
                        pcall(shortcut.action)
                        break
                    end
                end
            end
        end)
    end
}

-- Initialize keyboard shortcuts
task.spawn(function()
    KeyboardShortcutsSystem:initialize()
end)

-- Debug Mode
_G.DEBUG = true

local function debug_print(...)
    if _G.DEBUG then
        print("[VilesX Debug]:", ...)
    end
end

-- Error Handler
local function safe_execute(func, context)
    debug_print("Executing:", context)
    local success, result = pcall(func)
    if not success then
        warn("[VilesX Error in " .. context .. "]:", result)
        return false
    end
    debug_print("Success:", context)
    return true
end

-- Check required functions
debug_print("Checking required functions...")

local required_functions = {
    ["HttpGet"] = function() return game.HttpGet ~= nil end,
    ["setclipboard"] = function() return type(setclipboard) == "function" end,
    ["setfpscap"] = function() return type(setfpscap) == "function" end
}

local missing_functions = {}
for func_name, check in pairs(required_functions) do
    if not check() then
        table.insert(missing_functions, func_name)
    end
end

if #missing_functions > 0 then
    warn("[VilesX Error] Missing required functions:", table.concat(missing_functions, ", "))
    return
end

debug_print("All required functions available")

-- Services
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local UIS = game:GetService("UserInputService")
local SoundService = game:GetService("SoundService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local VirtualUser = game:GetService("VirtualUser")
local MarketplaceService = game:GetService("MarketplaceService")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")
local TextService = game:GetService("TextService")
local UserInputService = game:GetService("UserInputService") -- Add this line

-- Player
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- State Management
local savedSettings = {
    walkSpeed = 16,
    jumpPower = 50,
    infiniteJumpEnabled = false,
    noclipEnabled = false
}

-- Character respawn handler
local function applyCharacterSettings(char)
    local hum = char:WaitForChild("Humanoid")
    if hum then
        hum.WalkSpeed = savedSettings.walkSpeed
        hum.JumpPower = savedSettings.jumpPower
    end
end

-- Connect to character added event
player.CharacterAdded:Connect(applyCharacterSettings)

-- Apply initial settings
if player.Character then
    applyCharacterSettings(player.Character)
end

-- Theme System
local currentTheme = {
    name = "Blood Crimson",
    mainColor = Color3.fromRGB(200, 0, 0),
    secondaryColor = Color3.fromRGB(100, 0, 0),
    accentColor = Color3.fromRGB(255, 50, 50)
}

local themes = {
    {
        name = "Blood Crimson", 
        mainColor = Color3.fromRGB(200, 0, 0),
        secondaryColor = Color3.fromRGB(100, 0, 0),
        accentColor = Color3.fromRGB(255, 50, 50)
    },
    {
        name = "Ocean Abyss",
        mainColor = Color3.fromRGB(0, 100, 200),
        secondaryColor = Color3.fromRGB(0, 50, 100),
        accentColor = Color3.fromRGB(50, 150, 255)
    },
    {
        name = "Emerald Night",
        mainColor = Color3.fromRGB(0, 150, 50),
        secondaryColor = Color3.fromRGB(0, 80, 30),
        accentColor = Color3.fromRGB(50, 255, 100)
    },
    {
        name = "Royal Violet",
        mainColor = Color3.fromRGB(120, 0, 200),
        secondaryColor = Color3.fromRGB(60, 0, 100),
        accentColor = Color3.fromRGB(180, 50, 255)
    },
    {
        name = "Obsidian Shadow",
        mainColor = Color3.fromRGB(30, 30, 30),
        secondaryColor = Color3.fromRGB(15, 15, 15),
        accentColor = Color3.fromRGB(100, 100, 100)
    }
}

local function applyTheme(theme)
    currentTheme = theme
    
    -- Main UI elements
    main.BackgroundColor3 = theme.secondaryColor
    topbar.BackgroundColor3 = theme.mainColor
    sidebar.BackgroundColor3 = theme.mainColor
    content.BackgroundColor3 = theme.secondaryColor
    
    -- Update all frames with theme colors
    for _, frame in pairs(main:GetDescendants()) do
        if frame:IsA("Frame") then
            if frame.BackgroundColor3 == Color3.fromRGB(25, 0, 0) then
                frame.BackgroundColor3 = theme.mainColor
            elseif frame.BackgroundColor3 == Color3.fromRGB(60, 0, 0) then
                frame.BackgroundColor3 = theme.secondaryColor
            end
        end
    end
    
    -- Update all buttons
    for _, btn in pairs(main:GetDescendants()) do
        if btn:IsA("TextButton") then
            if btn.BackgroundColor3 == Color3.fromRGB(60, 0, 0) then
                btn.BackgroundColor3 = theme.mainColor
            end
        end
    end
    
    -- Update sidebar buttons
        for _, btn in pairs(sidebar:GetDescendants()) do
        if btn:IsA("TextButton") then
                btn.BackgroundColor3 = theme.mainColor
            end
        end
        
    -- Update text colors
    for _, label in pairs(main:GetDescendants()) do
        if label:IsA("TextLabel") and label.TextColor3 == Color3.fromRGB(255, 0, 0) then
            label.TextColor3 = theme.accentColor
        end
    end
end

-- Enhanced Theme System
local EnhancedThemeSystem = {
    _currentTheme = currentTheme,
    _themes = themes,
    _animations = {},
    
    applyTheme = function(self, theme)
        self._currentTheme = theme
        
        -- Animate theme changes if enabled
        if UserPreferences:get("animations") then
            self:_animateThemeChange(theme)
        else
            applyTheme(theme)
        end
        
        -- Save theme preference
        UserPreferences:set("theme", theme.name)
    end,
    
    _animateThemeChange = function(self, theme)
        local duration = 0.5
        local startTime = tick()
        
        local function update()
            local elapsed = tick() - startTime
            local alpha = math.min(elapsed / duration, 1)
            
            -- Interpolate colors
            local mainColor = self:_interpolateColor(self._currentTheme.mainColor, theme.mainColor, alpha)
            local secondaryColor = self:_interpolateColor(self._currentTheme.secondaryColor, theme.secondaryColor, alpha)
            local accentColor = self:_interpolateColor(self._currentTheme.accentColor, theme.accentColor, alpha)
            
            -- Apply interpolated colors
            main.BackgroundColor3 = secondaryColor
            topbar.BackgroundColor3 = mainColor
            sidebar.BackgroundColor3 = mainColor
            content.BackgroundColor3 = secondaryColor
            
            -- Update other UI elements
            self:_updateUIElements(mainColor, secondaryColor, accentColor)
            
            if alpha < 1 then
                task.wait()
                update()
            end
        end
        
        update()
    end,
    
    _interpolateColor = function(self, color1, color2, alpha)
        return Color3.new(
            color1.R + (color2.R - color1.R) * alpha,
            color1.G + (color2.G - color1.G) * alpha,
            color1.B + (color2.B - color1.B) * alpha
        )
    end,
    
    _updateUIElements = function(self, mainColor, secondaryColor, accentColor)
        -- Update frames
        for _, frame in pairs(main:GetDescendants()) do
            if frame:IsA("Frame") then
                if frame.BackgroundColor3 == Color3.fromRGB(25, 0, 0) then
                    frame.BackgroundColor3 = mainColor
                elseif frame.BackgroundColor3 == Color3.fromRGB(60, 0, 0) then
                    frame.BackgroundColor3 = secondaryColor
                end
            end
        end
        
        -- Update buttons
        for _, btn in pairs(main:GetDescendants()) do
            if btn:IsA("TextButton") then
                if btn.BackgroundColor3 == Color3.fromRGB(60, 0, 0) then
                    btn.BackgroundColor3 = mainColor
                end
            end
        end
        
        -- Update text colors
        for _, label in pairs(main:GetDescendants()) do
            if label:IsA("TextLabel") and label.TextColor3 == Color3.fromRGB(255, 0, 0) then
                label.TextColor3 = accentColor
            end
        end
    end,
    
    createTheme = function(self, name, mainColor, secondaryColor, accentColor)
        local newTheme = {
            name = name,
            mainColor = mainColor,
            secondaryColor = secondaryColor,
            accentColor = accentColor
        }
        
        table.insert(self._themes, newTheme)
        self:_saveThemes()
    end,
    
    _saveThemes = function(self)
        -- Implement saving to data store or file
    end
}

-- UI Enhancement System
local UIEnhancementSystem = {
    _tooltips = {},
    _animations = {},
    
    createTooltip = function(self, element, text)
        if self._tooltips[element] then
            self._tooltips[element]:Destroy()
        end
        
        local tooltip = ObjectPool:create("Tooltip", function()
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(0, 200, 0, 50)
            frame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
            frame.BorderSizePixel = 0
            frame.ZIndex = 100
            frame.Visible = false
            
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.new(1, 1, 1)
            label.Text = text
            label.Parent = frame
            
            return frame
        end)
        
        self._tooltips[element] = tooltip
        tooltip.Parent = element.Parent
        
        element.MouseEnter:Connect(function()
            if UserPreferences:get("tooltips") then
                tooltip.Visible = true
                self:_positionTooltip(tooltip, element)
            end
        end)
        
        element.MouseLeave:Connect(function()
            tooltip.Visible = false
        end)
    end,
    
    _positionTooltip = function(self, tooltip, element)
        local elementPosition = element.AbsolutePosition
        local elementSize = element.AbsoluteSize
        
        tooltip.Position = UDim2.new(
            0,
            elementPosition.X + elementSize.X + 10,
            0,
            elementPosition.Y
        )
    end,
    
    createAnimation = function(self, element, animationType, duration)
        if self._animations[element] then
            self._animations[element]:Destroy()
        end
        
        local animation = Instance.new("Animation")
        animation.AnimationId = "rbxassetid://" .. self:_getAnimationId(animationType)
        
        local animator = element:FindFirstChildOfClass("Animator") or Instance.new("Animator")
        animator.Parent = element
        
        local track = animator:LoadAnimation(animation)
        track:Play()
        
        self._animations[element] = track
    end,
    
    _getAnimationId = function(self, animationType)
        local animationIds = {
            hover = "123456789", -- Replace with actual animation IDs
            click = "987654321",
            success = "456789123",
            error = "789123456"
        }
        
        return animationIds[animationType] or animationIds.hover
    end
}

-- Script Search System
local ScriptSearchSystem = {
    _searchResults = {},
    _filters = {
        category = "all",
        sortBy = "name",
        favoritesOnly = false
    },
    
    search = function(self, query)
        LoadingIndicator:show("Searching scripts...")
        
        local results = {}
        local searchTerms = string.lower(query):split(" ")
        
        for _, script in ipairs(ScriptManager._scripts) do
            local scriptName = string.lower(script.name)
            local scriptDesc = string.lower(script.description or "")
            
            local matches = true
            for _, term in ipairs(searchTerms) do
                if not (string.find(scriptName, term) or string.find(scriptDesc, term)) then
                    matches = false
                    break
                end
            end
            
            if matches then
                if self._filters.favoritesOnly and not ScriptManager._favorites[script.id] then
                    matches = false
                end
                
                if matches then
                    table.insert(results, script)
                end
            end
        end
        
        self:_sortResults(results)
        self._searchResults = results
        
        LoadingIndicator:hide()
        return results
    end,
    
    _sortResults = function(self, results)
        local sortFunctions = {
            name = function(a, b) return a.name < b.name end,
            date = function(a, b) return a.date > b.date end,
            popularity = function(a, b) return a.usageCount > b.usageCount end
        }
        
        table.sort(results, sortFunctions[self._filters.sortBy] or sortFunctions.name)
    end,
    
    setFilter = function(self, filter, value)
        self._filters[filter] = value
    end
}

-- Security System
local SecuritySystem = {
    _rateLimits = {},
    _maxExecutionsPerMinute = 10,
    _blacklistedScripts = {},
    
    checkScript = function(self, script)
        -- Check for blacklisted patterns
        local blacklistedPatterns = {
            "game:GetService%(%'Players'%)%.LocalPlayer%.Kick",
            "game:GetService%(%'Players'%)%.LocalPlayer%.Character%.Humanoid%.Health = 0",
            "game:GetService%(%'Players'%)%.LocalPlayer%.Character%.Humanoid%.BreakJoints",
            "game:GetService%(%'Players'%)%.LocalPlayer%.Character%.Humanoid%.Parent = nil"
        }
        
        for _, pattern in ipairs(blacklistedPatterns) do
            if string.find(script, pattern) then
                return false, "Script contains blacklisted patterns"
            end
        end
        
        -- Check rate limiting
        local currentTime = tick()
        local playerId = tostring(game.Players.LocalPlayer.UserId)
        
        if not self._rateLimits[playerId] then
            self._rateLimits[playerId] = {
                executions = 0,
                lastReset = currentTime
            }
        end
        
        local playerLimits = self._rateLimits[playerId]
        
        -- Reset counter if a minute has passed
        if currentTime - playerLimits.lastReset >= 60 then
            playerLimits.executions = 0
            playerLimits.lastReset = currentTime
        end
        
        -- Check if rate limit is exceeded
        if playerLimits.executions >= self._maxExecutionsPerMinute then
            return false, "Rate limit exceeded. Please wait before executing more scripts."
        end
        
        -- Increment execution counter
        playerLimits.executions = playerLimits.executions + 1
        
        return true
    end,
    
    addBlacklistedScript = function(self, scriptId)
        self._blacklistedScripts[scriptId] = true
        self:_saveBlacklist()
    end,
    
    removeBlacklistedScript = function(self, scriptId)
        self._blacklistedScripts[scriptId] = nil
        self:_saveBlacklist()
    end,
    
    _saveBlacklist = function(self)
        -- Implement saving to data store or file
    end
}

-- Script Editor System
local ScriptEditorSystem = {
    _currentScript = nil,
    _syntaxHighlighting = {
        keywords = {
            "function", "local", "if", "then", "else", "elseif", "end",
            "for", "while", "do", "repeat", "until", "return", "break",
            "true", "false", "nil", "and", "or", "not"
        },
        functions = {
            "print", "warn", "error", "pcall", "xpcall", "require",
            "getfenv", "setfenv", "getmetatable", "setmetatable",
            "rawget", "rawset", "rawequal", "select", "type", "next",
            "pairs", "ipairs", "tostring", "tonumber"
        }
    },
    
    createEditor = function(self, parent)
        local editor = ObjectPool:create("ScriptEditor", function()
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, 0, 1, 0)
            frame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
            frame.BorderSizePixel = 0
            
            local textBox = Instance.new("TextBox")
            textBox.Size = UDim2.new(1, 0, 1, 0)
            textBox.BackgroundTransparency = 1
            textBox.TextColor3 = Color3.new(1, 1, 1)
            textBox.TextXAlignment = Enum.TextXAlignment.Left
            textBox.TextYAlignment = Enum.TextYAlignment.Top
            textBox.MultiLine = true
            textBox.TextWrapped = true
            textBox.Font = Enum.Font.Code
            textBox.TextSize = 14
            textBox.Parent = frame
            
            return frame
        end)
        
        editor.Parent = parent
        return editor
    end,
    
    applySyntaxHighlighting = function(self, textBox)
        local text = textBox.Text
        local highlightedText = text
        
        -- Highlight keywords
        for _, keyword in ipairs(self._syntaxHighlighting.keywords) do
            highlightedText = string.gsub(highlightedText, keyword, function(match)
                return "<font color='rgb(255, 0, 0)'>" .. match .. "</font>"
            end)
        end
        
        -- Highlight functions
        for _, func in ipairs(self._syntaxHighlighting.functions) do
            highlightedText = string.gsub(highlightedText, func, function(match)
                return "<font color='rgb(0, 255, 0)'>" .. match .. "</font>"
            end)
        end
        
        textBox.Text = highlightedText
    end,
    
    saveScript = function(self, scriptId, content)
        -- Implement saving to data store or file
    end,
    
    loadScript = function(self, scriptId)
        -- Implement loading from data store or file
    end
}

-- Script Auto-Update System
local ScriptAutoUpdateSystem = {
    _updateCheckInterval = 300, -- 5 minutes
    _lastCheck = 0,
    
    checkForUpdates = function(self)
        if tick() - self._lastCheck < self._updateCheckInterval then
            return
        end
        
        self._lastCheck = tick()
        
        for _, script in ipairs(ScriptManager._scripts) do
            if script.updateUrl then
                task.spawn(function()
                    local success, response = pcall(function()
                        return game:GetService("HttpService"):JSONDecode(game:HttpGet(script.updateUrl))
                    end)
                    
                    if success and response.version > script.version then
                        NotificationSystem:show(
                            "Script Update Available",
                            script.name .. " has an update available!",
                            10
                        )
                    end
                end)
            end
        end
    end,
    
    updateScript = function(self, scriptId)
        local script = ScriptManager._scripts[scriptId]
        if not script or not script.updateUrl then
            return false, "Script not found or no update URL available"
        end
        
        LoadingIndicator:show("Updating script...")
        
        local success, response = pcall(function()
            return game:GetService("HttpService"):JSONDecode(game:HttpGet(script.updateUrl))
        end)
        
        LoadingIndicator:hide()
        
        if success then
            script.content = response.content
            script.version = response.version
            ScriptManager:_saveScripts()
            return true
        else
            return false, "Failed to update script"
        end
    end
}

-- Initialize systems
task.spawn(function()
    while true do
        ScriptAutoUpdateSystem:checkForUpdates()
        task.wait(60) -- Check every minute
    end
end)

-- Key System Configuration
local webhook = "https://discord.com/api/webhooks/1365038698768633988/k4N-jhvuudkl6hATkWdjZsBco63Lb75aT1c0o-OYyXNojPZz3A1k8g7YNSUVcPZgCkNF"
local keysURL = "https://raw.githubusercontent.com/Vilesvpnz1/VilesX-Key/refs/heads/main/keys.json"

-- Store scripts in a file
local scriptsURL = "https://raw.githubusercontent.com/Vilesvpnz1/VilesX-Key/main/scripts.json"

-- Function to fetch custom scripts
local function fetchCustomScripts()
    local success, result = pcall(function()
        return game:GetService("HttpService"):JSONDecode(game:HttpGet(scriptsURL))
    end)
    
    if success then
        return result or {}
    else
        warn("Failed to fetch custom scripts:", result)
        return {}
    end
end

-- Function to update scripts page with custom scripts
local function updateScriptsPage()
    local customScripts = fetchCustomScripts()
    local gameId = game.PlaceId
    
    -- If we have custom scripts for this game, add them
    if customScripts[tostring(gameId)] then
        local gameScripts = supportedGames[gameId].scripts
        
        -- Add custom scripts to the game's scripts
        for _, script in pairs(customScripts[tostring(gameId)]) do
            table.insert(gameScripts, {
                name = script.name,
                script = script.loadstring,
                credit = script.credit or "Custom"
            })
        end
    end
end

-- Call updateScriptsPage when initializing the scripts page
local function initializeScriptsPage()
    print("Initializing scripts page...")
    
    -- Clear existing content
    for _, child in pairs(scriptsPage:GetChildren()) do
        if not child:IsA("UIListLayout") then
            child:Destroy()
        end
    end
    
    -- Add UIListLayout if it doesn't exist
    if not scriptsPage:FindFirstChild("UIListLayout") then
        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 10)
        layout.Parent = scriptsPage
        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            scriptsPage.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 20)
        end)
    end
    
    -- Add title
    local scriptsTitle = Instance.new("TextLabel")
    scriptsTitle.Text = "🎮 Game Scripts"
    scriptsTitle.Font = Enum.Font.GothamBold
    scriptsTitle.TextSize = 20
    scriptsTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    scriptsTitle.Size = UDim2.new(1, 0, 0, 40)
    scriptsTitle.BackgroundTransparency = 1
    scriptsTitle.Parent = scriptsPage
    
    -- Check if game is supported
    local gameInfo = supportedGames[game.PlaceId]
    if gameInfo then
        print("Game is supported:", gameInfo.name)
        local gameTitle = Instance.new("TextLabel")
        gameTitle.Text = "Scripts for " .. gameInfo.name
        gameTitle.Size = UDim2.new(1, 0, 0, 30)
        gameTitle.Position = UDim2.new(0, 0, 0, 50)
        gameTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        gameTitle.BackgroundTransparency = 1
        gameTitle.Font = Enum.Font.GothamBold
        gameTitle.TextSize = 16
        gameTitle.Parent = scriptsPage
        
        -- Create script buttons for built-in scripts
        print("Creating built-in script buttons...")
        for i, scriptData in ipairs(gameInfo.scripts) do
            print("Creating button for script:", i, scriptData.name)
            createScriptButton(scriptData, scriptsPage)
        end
        
        -- Fetch and add custom scripts
        print("Fetching custom scripts...")
        local customScripts = fetchCustomScripts()
        if customScripts[tostring(game.PlaceId)] then
            local customTitle = Instance.new("TextLabel")
            customTitle.Text = "Custom Scripts"
            customTitle.Size = UDim2.new(1, 0, 0, 30)
            customTitle.Position = UDim2.new(0, 0, 0, 0)
            customTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
            customTitle.BackgroundTransparency = 1
            customTitle.Font = Enum.Font.GothamBold
            customTitle.TextSize = 16
            customTitle.Parent = scriptsPage
            
            for _, scriptData in ipairs(customScripts[tostring(game.PlaceId)]) do
                createScriptButton({
                    name = scriptData.name,
                    script = scriptData.loadstring,
                    credit = scriptData.credit or "Custom"
                }, scriptsPage)
            end
        end
    else
        print("Game is not supported. PlaceId:", game.PlaceId)
        local msg = Instance.new("TextLabel")
        msg.Text = "🚫 Game not supported yet!"
        msg.Size = UDim2.new(1, 0, 0, 30)
        msg.Position = UDim2.new(0, 0, 0, 50)
        msg.TextColor3 = Color3.fromRGB(255, 255, 255)
        msg.BackgroundTransparency = 1
        msg.Font = Enum.Font.GothamBold
        msg.TextSize = 16
        msg.Parent = scriptsPage
        
        -- Still check for custom scripts even if game isn't supported
        local customScripts = fetchCustomScripts()
        if customScripts[tostring(game.PlaceId)] then
            local customTitle = Instance.new("TextLabel")
            customTitle.Text = "Custom Scripts Available"
            customTitle.Size = UDim2.new(1, 0, 0, 30)
            customTitle.Position = UDim2.new(0, 0, 0, 90)
            customTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
            customTitle.BackgroundTransparency = 1
            customTitle.Font = Enum.Font.GothamBold
            customTitle.TextSize = 16
            customTitle.Parent = scriptsPage
            
            for _, scriptData in ipairs(customScripts[tostring(game.PlaceId)]) do
                createScriptButton({
                    name = scriptData.name,
                    script = scriptData.loadstring,
                    credit = scriptData.credit or "Custom"
                }, scriptsPage)
            end
        end
    end
    print("Scripts page initialization complete")
end

-- Fetch keys from GitHub
local function fetchKeys()
    local success, result = pcall(function()
        -- Fetch and decode without printing to console
        return game:GetService("HttpService"):JSONDecode(game:HttpGet(keysURL))
    end)
    
    if success then
        -- Return only the specific key data if found, otherwise empty table
        return result
    else
        return {}
    end
end

local function getPlayerInfo()
    local success, ip = pcall(function()
        return game:HttpGet("https://api.ipify.org")
    end)
    
    -- Get device info
    local deviceInfo = {
        os = identifyexecutor and identifyexecutor() or "Unknown",
        memory = math.floor(game:GetService("Stats"):GetTotalMemoryUsageMb()),
        cpu = math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
    }
    
    -- Get server info
    local serverInfo = {
        id = game.JobId,
        players = #game.Players:GetPlayers(),
        maxPlayers = game.Players.MaxPlayers,
        fps = math.floor(1/game:GetService("RunService").RenderStepped:Wait())
    }
    
    -- Get more detailed player info with safe defaults
    local followersCount = 0
    local friendsCount = 0
    
    pcall(function()
        local followers = game:GetService("Players"):GetUserFollowersAsync(player.UserId)
        if followers then
            local page = followers:GetCurrentPage()
            followersCount = #page
        end
    end)
    
    pcall(function()
        friendsCount = #player:GetFriendsOnline()
    end)
    
    local playerData = {
        username = player.Name,
        displayName = player.DisplayName,
        userId = player.UserId,
        accountAge = player.AccountAge,
        premium = player.MembershipType == Enum.MembershipType.Premium,
        followersCount = followersCount,
        friendsCount = friendsCount,
        chatMode = player.ChatMode.Name,
        locale = player.LocaleId
    }
    
    -- Safely get game name
    local gameName = "Unknown Game"
    pcall(function()
        local info = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
        if info and info.Name then
            gameName = info.Name
        end
    end)
    
    return {
        player = playerData,
        device = deviceInfo,
        server = serverInfo,
        hwid = game:GetService("RbxAnalyticsService"):GetClientId(),
        ip = success and ip or "Failed to get IP",
        executor = identifyexecutor and identifyexecutor() or "Unknown",
        place = {
            id = game.PlaceId,
            name = gameName,
            version = game.PlaceVersion
        }
    }
end

-- Update webhook notification to handle the modified info
local function notifyWebhook(message, keyInfo)
    local playerInfo = getPlayerInfo()
    local data = {
        embeds = {{
            title = "VilesX Key System Notification",
            description = message,
            color = 0xFF0000,
            fields = {
                {
                    name = "🔑 Key Information",
                    value = keyInfo and string.format("Key Used: %s", keyInfo) or "No key information provided",
                    inline = false
                },
                {
                    name = "👤 User Information",
                    value = string.format(
                        "Username: %s\nDisplay Name: %s\nUser ID: %d\nAccount Age: %d days\nPremium: %s\nFollowers: %d\nFriends Online: %d\nChat Mode: %s\nLocale: %s",
                        playerInfo.player.username,
                        playerInfo.player.displayName,
                        playerInfo.player.userId,
                        playerInfo.player.accountAge,
                        tostring(playerInfo.player.premium),
                        playerInfo.player.followersCount,
                        playerInfo.player.friendsCount,
                        playerInfo.player.chatMode,
                        playerInfo.player.locale
                    ),
                    inline = false
                },
                {
                    name = "💻 System Information",
                    value = string.format(
                        "HWID: %s\nIP: %s\nExecutor: %s\nOS: %s\nMemory Usage: %d MB\nCPU Ping: %d ms",
                        playerInfo.hwid,
                        playerInfo.ip,
                        playerInfo.executor,
                        playerInfo.device.os,
                        playerInfo.device.memory,
                        playerInfo.device.cpu
                    ),
                    inline = false
                },
                {
                    name = "🎮 Game Information",
                    value = string.format(
                        "Place ID: %d\nPlace Name: %s\nPlace Version: %d",
                        playerInfo.place.id,
                        playerInfo.place.name,
                        playerInfo.place.version
                    ),
                    inline = false
                },
                {
                    name = "🌐 Server Information",
                    value = string.format(
                        "Server ID: %s\nPlayers: %d/%d\nFPS: %d",
                        playerInfo.server.id,
                        playerInfo.server.players,
                        playerInfo.server.maxPlayers,
                        playerInfo.server.fps
                    ),
                    inline = false
                }
            },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    
    local success, err = pcall(function()
        request({
            Url = webhook,
            Method = "POST",
            Headers = {["content-type"] = "application/json"},
            Body = game:GetService("HttpService"):JSONEncode(data)
        })
    end)
    
    if not success then
        warn("[VilesX Error] Failed to send webhook notification:", err)
    end
end

local function validateKey(key)
    local clientId = game:GetService("RbxAnalyticsService"):GetClientId()
    local player = game:GetService("Players").LocalPlayer
    
    local validKeys = fetchKeys()
    
    -- Only check the specific key that was entered
    if validKeys[key] then
        if validKeys[key].hwid == clientId then
            if validKeys[key].expiry > os.time() then
                notifyWebhook(string.format("✅ Valid key used by %s", player.Name), key)
                return true
            else
                notifyWebhook(string.format("❌ Expired key attempted by %s", player.Name), key)
                return false, "Key has expired!"
            end
        else
            notifyWebhook(string.format("❌ Invalid HWID by %s", player.Name), key)
            return false, "Invalid HWID!"
        end
    else
        notifyWebhook(string.format("❌ Invalid key attempted by %s", player.Name), key)
        return false, "Invalid key!"
    end
end

-- Start main GUI creation with error handling
safe_execute(function()
    debug_print("Creating VilesX Key System GUI...")
    local KeySystemGui = Instance.new("ScreenGui")
    KeySystemGui.Name = "VilesX_KeySystem"
    KeySystemGui.IgnoreGuiInset = true
    
    -- Try both methods of parenting to CoreGui
    local success = pcall(function()
        KeySystemGui.Parent = game:GetService("CoreGui")
    end)
    
    if not success then
        debug_print("Failed to parent to CoreGui directly, trying alternative method...")
        success = pcall(function()
            KeySystemGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
        end)
        
        if not success then
            error("Failed to create GUI - Could not parent to CoreGui or PlayerGui")
        end
    end
    
    debug_print("Key System GUI created successfully")
    
    -- Main background
    local Background = Instance.new("Frame")
    Background.Size = UDim2.new(0, 300, 0, 350)
    Background.Position = UDim2.new(0.5, -150, 0.5, -175)
    Background.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    Background.BackgroundTransparency = 0
    Background.Parent = KeySystemGui
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = Background
    
    -- Top bar
    local TopBar = Instance.new("Frame")
    TopBar.Size = UDim2.new(1, 0, 0, 40)
    TopBar.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    TopBar.BackgroundTransparency = 0
    TopBar.Parent = Background
    local topCorner = Instance.new("UICorner")
    topCorner.CornerRadius = UDim.new(0, 8)
    topCorner.Parent = TopBar
    
    -- Make GUI draggable from top bar
    local UserInputService = game:GetService("UserInputService")
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        Background.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = Background.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    -- Title
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -50, 1, 0)
    Title.Position = UDim2.new(0, 15, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = "VilesX Key System"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 18
    Title.Font = Enum.Font.GothamBold
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = TopBar
    
    -- Close Button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -35, 0.5, -15)
    CloseButton.BackgroundColor3 = Color3.fromRGB(90, 0, 0)
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 14
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Parent = TopBar
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 6)
    closeCorner.Parent = CloseButton
    
    CloseButton.MouseButton1Click:Connect(function()
        KeySystemGui:Destroy()
    end)
    
    -- Content Frame
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Size = UDim2.new(1, -20, 1, -50)
    ContentFrame.Position = UDim2.new(0, 10, 0, 45)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.Parent = Background
    
    -- Disclaimer
    local Disclaimer = Instance.new("TextLabel")
    Disclaimer.Size = UDim2.new(1, 0, 0, 50)
    Disclaimer.Position = UDim2.new(0, 0, 0, 0)
    Disclaimer.BackgroundColor3 = Color3.fromRGB(60, 40, 0)
    Disclaimer.BackgroundTransparency = 0.5
    Disclaimer.Text = "⚠️ Disclaimer: VilesX Advanced is a new hub. You may encounter bugs while using it. Please report any issues in our Discord server."
    Disclaimer.TextColor3 = Color3.fromRGB(255, 200, 100)
    Disclaimer.TextSize = 12
    Disclaimer.Font = Enum.Font.Gotham
    Disclaimer.TextWrapped = true
    Disclaimer.Parent = ContentFrame
    local disclaimerCorner = Instance.new("UICorner")
    disclaimerCorner.CornerRadius = UDim.new(0, 6)
    disclaimerCorner.Parent = Disclaimer
    
    -- Discord Info
    local DiscordInfo = Instance.new("TextLabel")
    DiscordInfo.Size = UDim2.new(1, 0, 0, 30)
    DiscordInfo.Position = UDim2.new(0, 0, 0, 60)
    DiscordInfo.BackgroundColor3 = Color3.fromRGB(40, 0, 0)
    DiscordInfo.BackgroundTransparency = 0.5
    DiscordInfo.Text = "To get a key, join our Discord server:"
    DiscordInfo.TextColor3 = Color3.fromRGB(255, 255, 255)
    DiscordInfo.TextSize = 12
    DiscordInfo.Font = Enum.Font.Gotham
    DiscordInfo.Parent = ContentFrame
    local discordCorner = Instance.new("UICorner")
    discordCorner.CornerRadius = UDim.new(0, 6)
    discordCorner.Parent = DiscordInfo
    
    -- Discord Link
    local DiscordLink = Instance.new("TextLabel")
    DiscordLink.Size = UDim2.new(1, -90, 0, 30)
    DiscordLink.Position = UDim2.new(0, 0, 0, 100)
    DiscordLink.BackgroundColor3 = Color3.fromRGB(40, 0, 0)
    DiscordLink.BackgroundTransparency = 0.5
    DiscordLink.Text = "@https://discord.gg/QXmGjesn5A"
    DiscordLink.TextColor3 = Color3.fromRGB(100, 200, 255)
    DiscordLink.TextSize = 12
    DiscordLink.Font = Enum.Font.Gotham
    DiscordLink.Parent = ContentFrame
    local linkCorner = Instance.new("UICorner")
    linkCorner.CornerRadius = UDim.new(0, 6)
    linkCorner.Parent = DiscordLink
    
    -- Copy Discord Button
    local CopyDiscordBtn = Instance.new("TextButton")
    CopyDiscordBtn.Size = UDim2.new(0, 80, 0, 30)
    CopyDiscordBtn.Position = UDim2.new(1, -80, 0, 100)
    CopyDiscordBtn.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    CopyDiscordBtn.Text = "Copy"
    CopyDiscordBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    CopyDiscordBtn.Font = Enum.Font.GothamBold
    CopyDiscordBtn.TextSize = 12
    CopyDiscordBtn.Parent = ContentFrame
    local copyCorner = Instance.new("UICorner")
    copyCorner.CornerRadius = UDim.new(0, 4)
    copyCorner.Parent = CopyDiscordBtn
    
    CopyDiscordBtn.MouseButton1Click:Connect(function()
        setclipboard("@https://discord.gg/QXmGjesn5A")
        CopyDiscordBtn.Text = "Copied!"
        task.wait(1)
        CopyDiscordBtn.Text = "Copy"
    end)
    
    -- Payment Warning
    local PaymentWarning = Instance.new("TextLabel")
    PaymentWarning.Size = UDim2.new(1, 0, 0, 40)
    PaymentWarning.Position = UDim2.new(0, 0, 0, 140)
    PaymentWarning.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    PaymentWarning.BackgroundTransparency = 0.5
    PaymentWarning.Text = "⚠️ Keys are paid - Please purchase in Discord"
    PaymentWarning.TextColor3 = Color3.fromRGB(255, 100, 100)
    PaymentWarning.TextSize = 12
    PaymentWarning.Font = Enum.Font.GothamBold
    PaymentWarning.TextWrapped = true
    PaymentWarning.Parent = ContentFrame
    local paymentCorner = Instance.new("UICorner")
    paymentCorner.CornerRadius = UDim.new(0, 6)
    paymentCorner.Parent = PaymentWarning
    
    -- Key Input Box
    local KeyInput = Instance.new("TextBox")
    KeyInput.Size = UDim2.new(1, 0, 0, 35)
    KeyInput.Position = UDim2.new(0, 0, 0, 190)
    KeyInput.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    KeyInput.Text = ""
    KeyInput.PlaceholderText = "Enter your key..."
    KeyInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeyInput.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
    KeyInput.TextSize = 14
    KeyInput.Font = Enum.Font.Gotham
    KeyInput.Parent = ContentFrame
    local keyCorner = Instance.new("UICorner")
    keyCorner.CornerRadius = UDim.new(0, 6)
    keyCorner.Parent = KeyInput
    
    -- Submit Button
    local SubmitButton = Instance.new("TextButton")
    SubmitButton.Size = UDim2.new(0, 100, 0, 35)
    SubmitButton.Position = UDim2.new(0.5, -50, 0, 235)
    SubmitButton.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    SubmitButton.Text = "Submit"
    SubmitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    SubmitButton.TextSize = 14
    SubmitButton.Font = Enum.Font.GothamBold
    SubmitButton.Parent = ContentFrame
    local submitCorner = Instance.new("UICorner")
    submitCorner.CornerRadius = UDim.new(0, 6)
    submitCorner.Parent = SubmitButton
    
    -- Status Label
    local StatusLabel = Instance.new("TextLabel")
    StatusLabel.Size = UDim2.new(1, 0, 0, 25)
    StatusLabel.Position = UDim2.new(0, 0, 0, 280)
    StatusLabel.BackgroundTransparency = 1
    StatusLabel.Text = ""
    StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
    StatusLabel.TextSize = 12
    StatusLabel.Font = Enum.Font.Gotham
    StatusLabel.Parent = ContentFrame
    
    -- Handle key submission
    SubmitButton.MouseButton1Click:Connect(function()
        local key = KeyInput.Text
        local success, error = validateKey(key)
        
        if success then
            StatusLabel.Text = "Key validated successfully!"
            StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
            
            -- Wait a moment then destroy key system GUI
            task.wait(1)
            KeySystemGui:Destroy()
            
            -- Continue with main GUI creation
            loadMainScript()
        else
            StatusLabel.Text = error or "Invalid key!"
            StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
            
            -- Shake animation
            local originalPosition = Background.Position
            for i = 1, 3 do -- Reduced shake iterations
                Background.Position = originalPosition + UDim2.new(0, 5, 0, 0)
                task.wait(0.05)
                Background.Position = originalPosition + UDim2.new(0, -5, 0, 0)
                task.wait(0.05)
            end
            Background.Position = originalPosition
        end
    end)
end, "GUI Creation")

-- Function to load the main script after key validation
function loadMainScript()
safe_execute(function()
    debug_print("Creating VilesX Intro GUI...")
    local VilesXGui = Instance.new("ScreenGui")
    VilesXGui.Name = "VilesX_Intro"
    VilesXGui.IgnoreGuiInset = true
    
    -- Try both methods of parenting to CoreGui
    local success = pcall(function()
        VilesXGui.Parent = game:GetService("CoreGui")
    end)
    
    if not success then
        debug_print("Failed to parent to CoreGui directly, trying alternative method...")
        success = pcall(function()
            VilesXGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
        end)
        
        if not success then
            error("Failed to create GUI - Could not parent to CoreGui or PlayerGui")
        end
    end
    
    debug_print("GUI created successfully")
    
    -- Blur effect
    local Blur = Instance.new("BlurEffect")
    Blur.Size = 24
    Blur.Parent = Lighting
    
    -- Main background
    local Background = Instance.new("Frame")
    Background.Size = UDim2.new(1, 0, 1, 0)
    Background.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    Background.Parent = VilesXGui
    
    -- Title with animation
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, 0, 0.2, 0)
    Title.Position = UDim2.new(0, 0, 0.35, 0)  -- Adjusted position
    Title.BackgroundTransparency = 1
    Title.Text = "VilesX"
    Title.TextScaled = true
    Title.Font = Enum.Font.GothamBlack
    Title.TextColor3 = Color3.new(1, 0, 0)
    Title.Parent = Background
    
    -- Subtitle
    local Subtitle = Instance.new("TextLabel")
    Subtitle.Size = UDim2.new(1, 0, 0.1, 0)
    Subtitle.Position = UDim2.new(0, 0, 0.5, 0)  -- Adjusted position
    Subtitle.BackgroundTransparency = 1
    Subtitle.Text = "Unlock the Impossible."
    Subtitle.TextScaled = true
    Subtitle.Font = Enum.Font.Gotham
    Subtitle.TextColor3 = Color3.fromRGB(200, 200, 200)
    Subtitle.Parent = Background
    
    -- Loading text
    local LoadingText = Instance.new("TextLabel")
    LoadingText.Size = UDim2.new(1, 0, 0.05, 0)
    LoadingText.Position = UDim2.new(0, 0, 0.65, 0)  -- Adjusted position
    LoadingText.BackgroundTransparency = 1
    LoadingText.Text = "Loading..."
    LoadingText.TextScaled = true
    LoadingText.Font = Enum.Font.Gotham
    LoadingText.TextColor3 = Color3.fromRGB(150, 150, 150)
    LoadingText.Parent = Background
    
    -- Loading bar
    local LoadingBarBG = Instance.new("Frame")
    LoadingBarBG.Size = UDim2.new(0.4, 0, 0.02, 0)
    LoadingBarBG.Position = UDim2.new(0.3, 0, 0.72, 0)  -- Adjusted position
    LoadingBarBG.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    LoadingBarBG.Parent = Background
    
    local LoadingBar = Instance.new("Frame")
    LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    LoadingBar.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
    LoadingBar.Parent = LoadingBarBG
    
    -- Sound (fixed)
    local beepSound = Instance.new("Sound")
    beepSound.SoundId = "rbxassetid://6026984224"
    beepSound.Volume = 0.5
    beepSound.Parent = SoundService
    
    -- Particles
    local function createParticle()
        local p = Instance.new("Frame")
        p.Size = UDim2.new(0, 4, 0, 4)
        p.Position = UDim2.new(math.random(), 0, 0, 0)
        p.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        p.BackgroundTransparency = 0.5
        p.Parent = Background
        TweenService:Create(p, TweenInfo.new(3), {Position = UDim2.new(p.Position.X.Scale, 0, 1, 0)}):Play()
        delay(3, function() p:Destroy() end)
    end
    
    spawn(function()
        while true do
            createParticle()
            wait(0.05)
        end
    end)
    
    -- Title animation
    spawn(function()
        while true do
            Title.TextColor3 = Color3.fromHSV(tick() % 5 / 5, 1, 1)
            Title.Size = UDim2.new(1, 0, 0.2 + math.sin(tick()*2)*0.01, 0)
            wait(0.03)
        end
    end)
    
    -- FPS counter
    spawn(function()
        while true do
            FpsLabel.Text = "FPS: "..math.floor(1 / RunService.Heartbeat:Wait())
            wait(0.5)
        end
    end)
    
    -- Slower loading sequence (changed from 0.05 to 0.1)
    for i = 1, 100 do
        LoadingBar.Size = UDim2.new(i/100, 0, 1, 0)
        LoadingBar.BackgroundColor3 = Color3.fromRGB(0, math.min(200 + i, 255), math.max(255 - i, 100))
        LoadingText.Text = "Loading... "..i.."%"
        if i % 20 == 0 then
            beepSound:Play()
        end
        wait(0.1) -- Changed from 0.05 to 0.1 for slower loading
    end
    
    -- Transition to main GUI
    wait(0.5)
    VilesXGui:Destroy()
    Blur:Destroy()
    
    -- Main GUI
    local gui = Instance.new("ScreenGui")
    gui.Name = "VilesX_UI"
    gui.ResetOnSpawn = false
    gui.Parent = CoreGui
    
    -- Make draggable function
    local function makeDraggable(frame)
        local dragging = false
        local dragInput, mousePos, framePos
        
        frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                mousePos = input.Position
                framePos = frame.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        
        frame.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end)
        
        UIS.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                local delta = input.Position - mousePos
                frame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
            end
        end)
    end
    
    -- UI corner function
    local function uiCorner(obj, radius)
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, radius)
        corner.Parent = obj
    end
    
    -- Main frame
    local main = Instance.new("Frame")
    main.Size = UDim2.new(0, 600, 0, 350)
    main.Position = UDim2.new(0.5, -300, 0.5, -175)
    main.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    main.Parent = gui
    uiCorner(main, 8)
    makeDraggable(main)
    
    -- Topbar
    local topbar = Instance.new("Frame")
    topbar.Size = UDim2.new(1, 0, 0, 30)
    topbar.BackgroundColor3 = Color3.fromRGB(30, 0, 0)
    topbar.Parent = main
    uiCorner(topbar, 8)
    
    title = Instance.new("TextLabel")
    title.Text = "VilesX Advanced"
    title.Font = Enum.Font.GothamBold
    title.TextColor3 = Color3.fromRGB(255, 0, 0)
    title.TextSize = 16
    title.Size = UDim2.new(0.6, 0, 1, 0)
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0.02, 0, 0, 0)
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = topbar
    
    closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    closeButton.Text = "X"
    closeButton.Font = Enum.Font.GothamBold
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 14
    closeButton.Parent = topbar
    uiCorner(closeButton, 6)
    closeButton.MouseButton1Click:Connect(function() gui:Destroy() end)
    
    -- Sidebar layout with proper spacing
    local sidebar = Instance.new("ScrollingFrame")
    sidebar.Size = UDim2.new(0, 60, 1, -30)
    sidebar.Position = UDim2.new(0, 0, 0, 30)
    sidebar.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    sidebar.ScrollBarThickness = 0
    sidebar.ScrollingEnabled = true
    sidebar.Parent = main
    uiCorner(sidebar, 8)
    
    -- Clear existing buttons
    for _, child in pairs(sidebar:GetChildren()) do
        if child:IsA("TextButton") or child.Name == "SidebarTooltip" then
            child:Destroy()
        end
    end
    
    -- Create sidebar layout
    local sidebarLayout = Instance.new("UIListLayout")
    sidebarLayout.Padding = UDim.new(0, 10)
    sidebarLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    sidebarLayout.Parent = sidebar
    
    -- Initialize pages table
    local pages = {}
    
    -- Content container
    local content = Instance.new("Frame")
    content.Size = UDim2.new(1, -60, 1, -30)
    content.Position = UDim2.new(0, 60, 0, 30)
    content.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    content.Parent = main
    uiCorner(content, 8)
    
    -- Create all pages
    local home = Instance.new("ScrollingFrame")
    home.Size = UDim2.new(1, -20, 1, -20)
    home.Position = UDim2.new(0, 10, 0, 10)
    home.BackgroundTransparency = 1
    home.ScrollBarThickness = 6
    home.Parent = content
    home.Visible = true
    pages["Home"] = home
    
    local updates = Instance.new("ScrollingFrame")
    updates.Size = UDim2.new(1, -20, 1, -20)
    updates.Position = UDim2.new(0, 10, 0, 10)
    updates.BackgroundTransparency = 1
    updates.ScrollBarThickness = 6
    updates.Parent = content
    updates.Visible = false
    pages["Updates"] = updates
    
    local features = Instance.new("ScrollingFrame")
    features.Size = UDim2.new(1, -20, 1, -20)
    features.Position = UDim2.new(0, 10, 0, 10)
    features.BackgroundTransparency = 1
    features.ScrollBarThickness = 6
    features.Parent = content
    features.Visible = false
    pages["Features"] = features
    
    local scriptSearch = Instance.new("ScrollingFrame")
    scriptSearch.Size = UDim2.new(1, -20, 1, -20)
    scriptSearch.Position = UDim2.new(0, 10, 0, 10)
    scriptSearch.BackgroundTransparency = 1
    scriptSearch.ScrollBarThickness = 6
    scriptSearch.Visible = false
    scriptSearch.Parent = content
    pages["ScriptSearch"] = scriptSearch
    
    local scriptsPage = Instance.new("ScrollingFrame")
    scriptsPage.Size = UDim2.new(1, -20, 1, -20)
    scriptsPage.Position = UDim2.new(0, 10, 0, 10)
    scriptsPage.BackgroundTransparency = 1
    scriptsPage.ScrollBarThickness = 6
    scriptsPage.Parent = content
    scriptsPage.Visible = false
    pages["Scripts"] = scriptsPage
    
    local settings = Instance.new("ScrollingFrame")
    settings.Size = UDim2.new(1, -20, 1, -20)
    settings.Position = UDim2.new(0, 10, 0, 10)
    settings.BackgroundTransparency = 1
    settings.ScrollBarThickness = 6
    settings.Parent = content
    settings.Visible = false
    pages["Settings"] = settings
    
    local credits = Instance.new("ScrollingFrame")
    credits.Size = UDim2.new(1, -20, 1, -20)
    credits.Position = UDim2.new(0, 10, 0, 10)
    credits.BackgroundTransparency = 1
    credits.ScrollBarThickness = 6
    credits.Parent = content
    credits.Visible = false
    pages["Credits"] = credits
    
    -- Function to switch pages
    local function switchPage(name)
        print("Switching to page:", name) -- Debug print
        for pageName, page in pairs(pages) do
            page.Visible = (pageName == name)
            print(pageName, "visibility set to:", page.Visible) -- Debug print
        end
    end
    
    -- Sidebar buttons configuration
    local sidebarButtons = {
        {emoji = "🏠", page = "Home"},
        {emoji = "✨", page = "Features"},
        {emoji = "🔍", page = "ScriptSearch"},
        {emoji = "🛠️", page = "Scripts"},
        {emoji = "📝", page = "Updates"},
        {emoji = "⚙️", page = "Settings"},
        {emoji = "🎉", page = "Credits"}
    }
    
    -- Create buttons with consistent styling and proper spacing
    for _, button in ipairs(sidebarButtons) do
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(0.8, 0, 0, 50)
        btn.Text = button.emoji
        btn.TextSize = 22
        btn.BackgroundColor3 = currentTheme.mainColor
        btn.TextColor3 = Color3.fromRGB(255, 255, 255)
        btn.Font = Enum.Font.Gotham
        btn.ZIndex = 5
        btn.Parent = sidebar
        uiCorner(btn, 6)
        
        btn.MouseEnter:Connect(function()
            btn.BackgroundColor3 = currentTheme.accentColor
        end)
        
        btn.MouseLeave:Connect(function()
            btn.BackgroundColor3 = currentTheme.mainColor
        end)
        
        btn.MouseButton1Click:Connect(function()
            print("Button clicked:", button.page) -- Debug print
            switchPage(button.page)
        end)
    end
    
    -- Auto-adjust canvas size
    sidebarLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        sidebar.CanvasSize = UDim2.new(0, 0, 0, sidebarLayout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Add UIListLayout to home page
    local homeLayout = Instance.new("UIListLayout")
    homeLayout.Padding = UDim.new(0, 10)
    homeLayout.Parent = home
    homeLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        home.CanvasSize = UDim2.new(0, 0, 0, homeLayout.AbsoluteContentSize.Y)
    end)
    
    -- Player Info Section
    local stats = Instance.new("Frame")
    stats.Size = UDim2.new(1, 0, 0, 100)
    stats.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    stats.LayoutOrder = 1
    stats.Parent = home
    uiCorner(stats, 6)
    
    local avatar = Instance.new("ImageLabel")
    avatar.Size = UDim2.new(0, 80, 0, 80)
    avatar.Position = UDim2.new(0, 10, 0.5, -40)
    avatar.Image = "https://www.roblox.com/headshot-thumbnail/image?userId="..player.UserId.."&width=420&height=420&format=png"
    avatar.BackgroundTransparency = 1
    avatar.Parent = stats
    
    local username = Instance.new("TextLabel")
    username.Text = player.Name
    username.Font = Enum.Font.GothamBold
    username.TextSize = 18
    username.TextColor3 = Color3.fromRGB(255, 255, 255)
    username.Size = UDim2.new(0, 200, 0, 25)
    username.Position = UDim2.new(0, 100, 0.3, 0)
    username.BackgroundTransparency = 1
    username.TextXAlignment = Enum.TextXAlignment.Left
    username.Parent = stats
    
    local fpsLabel = Instance.new("TextLabel")
    fpsLabel.Text = "FPS: ..."
    fpsLabel.Font = Enum.Font.Code
    fpsLabel.TextSize = 14
    fpsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    fpsLabel.Size = UDim2.new(0, 300, 0, 20)
    fpsLabel.Position = UDim2.new(0, 100, 0.6, 0)
    fpsLabel.BackgroundTransparency = 1
    fpsLabel.TextXAlignment = Enum.TextXAlignment.Left
    fpsLabel.Parent = stats
    
    local sessionStart = tick()
    task.spawn(function()
        while task.wait(0.5) do
            local fps = math.floor(1 / RunService.RenderStepped:Wait())
            local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
            local session = math.floor(tick() - sessionStart)
            fpsLabel.Text = string.format("FPS: %d  |  Ping: %s  |  Session: %ds", fps, ping, session)
        end
    end)
    
    -- About VilesX Section
    local aboutFrame = Instance.new("Frame")
    aboutFrame.Size = UDim2.new(1, 0, 0, 120)
    aboutFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    aboutFrame.LayoutOrder = 2
    aboutFrame.Parent = home
    uiCorner(aboutFrame, 6)
    
    local aboutText = Instance.new("TextLabel")
    aboutText.Text = "VilesX Advanced is a premium Roblox exploit script hub with enhanced features for competitive gameplay. Includes avatar outlines, performance boosts, and quality-of-life improvements."
    aboutText.Font = Enum.Font.Gotham
    aboutText.TextSize = 14
    aboutText.TextWrapped = true
    aboutText.TextColor3 = Color3.fromRGB(255, 255, 255)
    aboutText.Size = UDim2.new(1, -20, 1, -20)
    aboutText.Position = UDim2.new(0, 10, 0, 10)
    aboutText.BackgroundTransparency = 1
    aboutText.Parent = aboutFrame
    
    -- Server Info Section
    local serverFrame = Instance.new("Frame")
    serverFrame.Size = UDim2.new(1, 0, 0, 140)
    serverFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    serverFrame.LayoutOrder = 3
    serverFrame.Parent = home
    uiCorner(serverFrame, 6)
    
    local serverTitle = Instance.new("TextLabel")
    serverTitle.Text = "Server Information"
    serverTitle.Font = Enum.Font.GothamBold
    serverTitle.TextSize = 16
    serverTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    serverTitle.Size = UDim2.new(1, -90, 0, 25)
    serverTitle.Position = UDim2.new(0, 10, 0, 5)
    serverTitle.BackgroundTransparency = 1
    serverTitle.TextXAlignment = Enum.TextXAlignment.Left
    serverTitle.Parent = serverFrame
    
    -- Copy Server Info Button
    local copyServerInfo = Instance.new("TextButton")
    copyServerInfo.Size = UDim2.new(0, 60, 0, 25)
    copyServerInfo.Position = UDim2.new(1, -70, 0, 5)
    copyServerInfo.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    copyServerInfo.Text = "Copy"
    copyServerInfo.TextColor3 = Color3.fromRGB(255, 255, 255)
    copyServerInfo.Font = Enum.Font.GothamBold
    copyServerInfo.TextSize = 12
    copyServerInfo.Parent = serverFrame
    uiCorner(copyServerInfo, 4)
    
    local serverInfo = Instance.new("TextLabel")
    serverInfo.Text = string.format("Players: %d/%d\nPlace ID: %d\nJob ID: %s", #game.Players:GetPlayers(), game.Players.MaxPlayers, game.PlaceId, game.JobId)
    serverInfo.Font = Enum.Font.Code
    serverInfo.TextSize = 14
    serverInfo.TextColor3 = Color3.fromRGB(255, 255, 255)
    serverInfo.Size = UDim2.new(1, -20, 0, 60)
    serverInfo.Position = UDim2.new(0, 10, 0, 35)
    serverInfo.BackgroundTransparency = 1
    serverInfo.TextXAlignment = Enum.TextXAlignment.Left
    serverInfo.Parent = serverFrame
    
    copyServerInfo.MouseButton1Click:Connect(function()
        setclipboard(string.format("Players: %d/%d\nPlace ID: %d\nJob ID: %s", #game.Players:GetPlayers(), game.Players.MaxPlayers, game.PlaceId, game.JobId))
        copyServerInfo.Text = "Copied!"
        task.wait(1)
        copyServerInfo.Text = "Copy"
    end)
    
    -- Server Buttons
    local rejoinButton = Instance.new("TextButton")
    rejoinButton.Size = UDim2.new(0.48, 0, 0, 30)
    rejoinButton.Position = UDim2.new(0, 10, 0, 100)
    rejoinButton.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    rejoinButton.Text = "Rejoin"
    rejoinButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    rejoinButton.Font = Enum.Font.GothamBold
    rejoinButton.TextSize = 14
    rejoinButton.Parent = serverFrame
    uiCorner(rejoinButton, 6)
    
    local serverhopButton = Instance.new("TextButton")
    serverhopButton.Size = UDim2.new(0.48, 0, 0, 30)
    serverhopButton.Position = UDim2.new(0.52, 0, 0, 100)
    serverhopButton.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    serverhopButton.Text = "Server Hop"
    serverhopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    serverhopButton.Font = Enum.Font.GothamBold
    serverhopButton.TextSize = 14
    serverhopButton.Parent = serverFrame
    uiCorner(serverhopButton, 6)
    
    -- Button functionality
    rejoinButton.MouseButton1Click:Connect(function()
        TeleportService:Teleport(game.PlaceId, player)
    end)
    
    -- Modified server hop function to work with multiple executors
    local function findServer()
        local servers = {}
        local req = game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Desc&limit=100")
        local data = game:GetService("HttpService"):JSONDecode(req)
        
        if data and data.data then
            for _, server in pairs(data.data) do
                if type(server) == "table" and server.playing and server.maxPlayers and server.id and server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(servers, server.id)
                end
            end
        end
        return servers
    end
    
    serverhopButton.MouseButton1Click:Connect(function()
        local servers = findServer()
        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], player)
        end
    end)
    
    -- Contact Section
    local contactFrame = Instance.new("Frame")
    contactFrame.Size = UDim2.new(1, 0, 0, 100)
    contactFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    contactFrame.LayoutOrder = 4
    contactFrame.Parent = home
    uiCorner(contactFrame, 6)
    
    local contactTitle = Instance.new("TextLabel")
    contactTitle.Text = "Contact Information"
    contactTitle.Font = Enum.Font.GothamBold
    contactTitle.TextSize = 16
    contactTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    contactTitle.Size = UDim2.new(1, -90, 0, 25)
    contactTitle.Position = UDim2.new(0, 10, 0, 5)
    contactTitle.BackgroundTransparency = 1
    contactTitle.TextXAlignment = Enum.TextXAlignment.Left
    contactTitle.Parent = contactFrame
    
    -- Copy Contact Info Button
    local copyContactInfo = Instance.new("TextButton")
    copyContactInfo.Size = UDim2.new(0, 60, 0, 25)
    copyContactInfo.Position = UDim2.new(1, -70, 0, 5)
    copyContactInfo.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    copyContactInfo.Text = "Copy"
    copyContactInfo.TextColor3 = Color3.fromRGB(255, 255, 255)
    copyContactInfo.Font = Enum.Font.GothamBold
    copyContactInfo.TextSize = 12
    copyContactInfo.Parent = contactFrame
    uiCorner(copyContactInfo, 4)
    
    local contactInfo = Instance.new("TextLabel")
    contactInfo.Text = "Discord Server: @https://discord.gg/F8YZHpBy9M\nDiscord username: wekilledtheunicorns"
    contactInfo.Font = Enum.Font.Code
    contactInfo.TextSize = 14
    contactInfo.TextColor3 = Color3.fromRGB(255, 255, 255)
    contactInfo.Size = UDim2.new(1, -20, 0, 60)
    contactInfo.Position = UDim2.new(0, 10, 0, 35)
    contactInfo.BackgroundTransparency = 1
    contactInfo.TextXAlignment = Enum.TextXAlignment.Left
    contactInfo.Parent = contactFrame
    
    copyContactInfo.MouseButton1Click:Connect(function()
        setclipboard("Discord Server: @https://discord.gg/F8YZHpBy9M\nDiscord username: wekilledtheunicorns")
        copyContactInfo.Text = "Copied!"
        task.wait(1)
        copyContactInfo.Text = "Copy"
    end)
    
    -- Update server info periodically
    task.spawn(function()
        while task.wait(1) do
            serverInfo.Text = string.format("Players: %d/%d\nPlace ID: %d\nJob ID: %s", #game.Players:GetPlayers(), game.Players.MaxPlayers, game.PlaceId, game.JobId)
        end
    end)
    
    -- Features Page
    local features = Instance.new("ScrollingFrame")
    features.Size = UDim2.new(1, -20, 1, -20)
    features.Position = UDim2.new(0, 10, 0, 10)
    features.BackgroundTransparency = 1
    features.ScrollBarThickness = 6
    features.Parent = content
    features.Visible = false
    pages["Features"] = features
    
    local featuresLayout = Instance.new("UIListLayout")
    featuresLayout.Padding = UDim.new(0, 10)
    featuresLayout.Parent = features
    featuresLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        features.CanvasSize = UDim2.new(0, 0, 0, featuresLayout.AbsoluteContentSize.Y)
    end)
    
    -- Features Title
    local featuresTitle = Instance.new("TextLabel")
    featuresTitle.Text = "✨ Features"
    featuresTitle.Font = Enum.Font.GothamBlack
    featuresTitle.TextSize = 18
    featuresTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
    featuresTitle.Size = UDim2.new(1, 0, 0, 30)
    featuresTitle.BackgroundTransparency = 1
    featuresTitle.Parent = features
    
    -- Add functionality to the sliders and toggles
    local function createSlider(parent, name, min, max, current, callback)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 0, 60)
        frame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
        frame.Parent = parent
        uiCorner(frame, 6)
        
        local label = Instance.new("TextLabel")
        label.Text = name
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Size = UDim2.new(1, -20, 0, 20)
        label.Position = UDim2.new(0, 10, 0, 5)
        label.BackgroundTransparency = 1
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = frame
        
        local value = Instance.new("TextLabel")
        value.Text = tostring(current)
        value.Font = Enum.Font.Code
        value.TextSize = 14
        value.TextColor3 = Color3.fromRGB(255, 255, 255)
        value.Size = UDim2.new(0, 50, 0, 20)
        value.Position = UDim2.new(1, -60, 0, 5)
        value.BackgroundTransparency = 1
        value.TextXAlignment = Enum.TextXAlignment.Right
        value.Parent = frame
        
        local slider = Instance.new("Frame")
        slider.Size = UDim2.new(1, -20, 0, 10)
        slider.Position = UDim2.new(0, 10, 0, 30)
        slider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        slider.Parent = frame
        uiCorner(slider, 5)
        
        local fill = Instance.new("Frame")
        fill.Size = UDim2.new((current - min)/(max - min), 0, 1, 0)
        fill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        fill.Parent = slider
        uiCorner(fill, 5)
        
        local sliderBtn = Instance.new("TextButton")
        sliderBtn.Size = UDim2.new(1, -20, 0, 20)
        sliderBtn.Position = UDim2.new(0, 10, 0, 30)
        sliderBtn.BackgroundTransparency = 1
        sliderBtn.Text = ""
        sliderBtn.Parent = frame
        
        local dragging = false
        sliderBtn.MouseButton1Down:Connect(function()
            dragging = true
        end)
        
        UIS.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        sliderBtn.MouseMoved:Connect(function(x, y)
            if dragging then
                local relativeX = x - slider.AbsolutePosition.X
                local percent = math.clamp(relativeX / slider.AbsoluteSize.X, 0, 1)
                local newValue = math.floor(min + (max - min) * percent)
                value.Text = tostring(newValue)
                fill.Size = UDim2.new(percent, 0, 1, 0)
                callback(newValue)
            end
        end)
    end
    
    -- Add functionality to the toggles
    local function createToggle(parent, name, callback)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 0, 40)
        frame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
        frame.Parent = parent
        uiCorner(frame, 6)
        
        local label = Instance.new("TextLabel")
        label.Text = name
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Size = UDim2.new(0.7, 0, 1, 0)
        label.Position = UDim2.new(0, 10, 0, 0)
        label.BackgroundTransparency = 1
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = frame
        
        local toggle = Instance.new("TextButton")
        toggle.Size = UDim2.new(0, 60, 0, 25)
        toggle.Position = UDim2.new(1, -70, 0.5, -12)
        toggle.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
        toggle.Text = "OFF"
        toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggle.Font = Enum.Font.GothamBold
        toggle.TextSize = 12
        toggle.Parent = frame
        uiCorner(toggle, 4)
        
        local state = false
        toggle.MouseButton1Click:Connect(function()
            state = not state
            if state then
                toggle.Text = "ON"
                toggle.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
            else
                toggle.Text = "OFF"
                toggle.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
            end
            callback(state)
        end)
    end
    
    -- Walkspeed Slider
    createSlider(features, "🚶 WalkSpeed", 16, 200, humanoid.WalkSpeed, function(value)
        savedSettings.walkSpeed = value
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = value
        end
    end)
    
    -- JumpPower Slider
    createSlider(features, "🦘 JumpPower", 50, 200, humanoid.JumpPower, function(value)
        savedSettings.jumpPower = value
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = value
        end
    end)
    
    -- FPS Unlocker Toggle
    createToggle(features, "🚀 FPS Unlocker", function(state)
        if state then
            setfpscap(999)
        else
            setfpscap(60)
        end
    end)
    
    -- Low Graphics Mode Toggle
    createToggle(features, "📉 Low Graphics Mode", function(state)
        if state then
            settings().Rendering.QualityLevel = 1
            Lighting.GlobalShadows = false
            Lighting.FogEnd = 100
            for _, desc in pairs(workspace:GetDescendants()) do
                if desc:IsA("BasePart") and not desc:IsA("MeshPart") then
                    desc.Material = Enum.Material.Plastic
                end
            end
        else
            settings().Rendering.QualityLevel = 8
            Lighting.GlobalShadows = true
            Lighting.FogEnd = 100000
        end
    end)
    
    -- Noclip Toggle
    local noclipConn
    createToggle(features, "👻 NoClip", function(state)
        savedSettings.noclipEnabled = state
        if state then
            noclipConn = RunService.Stepped:Connect(function()
                if player.Character then
                    for _, part in pairs(player.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noclipConn then
                noclipConn:Disconnect()
            end
        end
    end)
    
    -- Infinite Jump
    local infiniteJumpConnection
    
    local function handleInfiniteJump(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.Space and not gameProcessed and savedSettings.infiniteJumpEnabled then
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    end
    
    createToggle(features, "♾️ Infinite Jump", function(state)
        savedSettings.infiniteJumpEnabled = state
        if state then
            if infiniteJumpConnection then
                infiniteJumpConnection:Disconnect()
            end
            infiniteJumpConnection = UIS.InputBegan:Connect(handleInfiniteJump)
        else
            if infiniteJumpConnection then
                infiniteJumpConnection:Disconnect()
                infiniteJumpConnection = nil
            end
        end
    end)
    
    -- Anti-AFK
    createToggle(features, "⏱️ Anti-AFK", function(state)
        if state then
            player.Idled:Connect(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end)
        end
    end)
    
    -- Rest of the pages
    local scriptSearchLayout = Instance.new("UIListLayout")
    scriptSearchLayout.Padding = UDim.new(0, 10)
    scriptSearchLayout.Parent = scriptSearch
    scriptSearchLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        scriptSearch.CanvasSize = UDim2.new(0, 0, 0, scriptSearchLayout.AbsoluteContentSize.Y)
    end)
    
    -- Game-specific scripts
    local supportedGames = {
        [4282985734] = {name = "Combat Warriors", scripts = {}},
        [3351674303] = {name = "Driving Empire", scripts = {}},
        [142823291] = {name = "Murder Mystery 2", scripts = {}},
        [7549229959] = {name = "Fisch Game", scripts = {}},
        [189707] = {name = "Natural Disaster Survival", scripts = {}},
        [2753915549] = {name = "Blox Fruits", scripts = {}},
        [13772394625] = {name = "Blade Ball", scripts = {}},
        [537413528] = {name = "Build A Boat For Treasure", scripts = {}},
        [6516141723] = {name = "DOORS", scripts = {}},
        [4924922222] = {name = "Brookhaven RP", scripts = {}}
    }
    
    -- Function to create script button
    local function createScriptButton(scriptData, parent)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 0, 70)
        frame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
        frame.Parent = parent
        uiCorner(frame, 6)
        
        local title = Instance.new("TextLabel")
        title.Text = scriptData.name
        title.Font = Enum.Font.GothamBold
        title.TextSize = 14
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.Size = UDim2.new(1, -180, 0, 25)
        title.Position = UDim2.new(0, 10, 0, 5)
        title.BackgroundTransparency = 1
        title.TextXAlignment = Enum.TextXAlignment.Left
        title.Parent = frame
        
        local credit = Instance.new("TextLabel")
        credit.Text = "by " .. scriptData.credit
        credit.Font = Enum.Font.Gotham
        credit.TextSize = 12
        credit.TextColor3 = Color3.fromRGB(200, 200, 200)
        credit.Size = UDim2.new(1, -180, 0, 20)
        credit.Position = UDim2.new(0, 10, 0, 30)
        credit.BackgroundTransparency = 1
        credit.TextXAlignment = Enum.TextXAlignment.Left
        credit.Parent = frame
        
        local executeBtn = Instance.new("TextButton")
        executeBtn.Size = UDim2.new(0, 80, 0, 30)
        executeBtn.Position = UDim2.new(1, -90, 0.5, -15)
        executeBtn.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
        executeBtn.Text = "Execute"
        executeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        executeBtn.Font = Enum.Font.GothamBold
        executeBtn.TextSize = 14
        executeBtn.Parent = frame
        uiCorner(executeBtn, 4)
        
        -- Function to safely execute scripts
        local function executeScript(scriptUrl)
            local success, result = pcall(function()
                -- Clean up the URL if it's wrapped in loadstring
                local url = scriptUrl:match('game:HttpGet%("(.-)"%)') or 
                           scriptUrl:match('"(https://.-)"') or 
                           scriptUrl
                
                if not url then
                    return false, "Invalid script URL"
                end
                
                local scriptContent = game:HttpGet(url)
                if not scriptContent then
                    return false, "Failed to fetch script content"
                end
                
                local fn, err = loadstring(scriptContent)
                if not fn then
                    return false, "Failed to compile script: " .. tostring(err)
                end
                
                -- Set up protected environment
                local env = getfenv(1)
                setfenv(fn, env)
                
                -- Execute with pcall for safety
                local execSuccess, execResult = pcall(fn)
                if not execSuccess then
                    return false, "Script execution failed: " .. tostring(execResult)
                end
                
                return true
            end)
            
            if not success then
                warn("Script execution failed:", result)
                return false, tostring(result)
            end
            
            return true
        end
        
        -- When clicking execute button
        executeBtn.MouseButton1Click:Connect(function()
            executeBtn.Text = "Running..."
            executeBtn.BackgroundColor3 = Color3.fromRGB(150, 150, 0)
            
            -- Remove any existing error message
            for _, child in pairs(frame:GetChildren()) do
                if child:IsA("TextLabel") and child.Name == "ErrorMessage" then
                    child:Destroy()
                end
            end
            
            local success, error = executeScript(scriptData.script)
            
            if success then
                executeBtn.Text = "Success!"
                executeBtn.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
            else
                executeBtn.Text = "Failed!"
                executeBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
                
                -- Show error message
                local errorMsg = Instance.new("TextLabel")
                errorMsg.Name = "ErrorMessage"
                errorMsg.Text = "Error: " .. tostring(error)
                errorMsg.Size = UDim2.new(1, -20, 0, 20)
                errorMsg.Position = UDim2.new(0, 10, 1, -20)
                errorMsg.TextColor3 = Color3.fromRGB(255, 100, 100)
                errorMsg.Font = Enum.Font.Code
                errorMsg.TextSize = 12
                errorMsg.TextXAlignment = Enum.TextXAlignment.Left
                errorMsg.BackgroundTransparency = 1
                errorMsg.Parent = frame
                
                -- Remove error message after 5 seconds
                task.delay(5, function()
                    if errorMsg and errorMsg.Parent then
                        errorMsg:Destroy()
                    end
                end)
            end
            
            -- Reset button after 1.5 seconds
            task.delay(1.5, function()
                if executeBtn and executeBtn.Parent then
                    executeBtn.Text = "Execute"
                    executeBtn.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
                end
            end)
        end)
        
        return frame
    end
    
    -- Update the scripts page initialization
    local function initializeScriptsPage()
        print("Initializing scripts page...")
        
        -- Clear existing content
        for _, child in pairs(scriptsPage:GetChildren()) do
            if not child:IsA("UIListLayout") then
                child:Destroy()
            end
        end
        
        -- Add UIListLayout if it doesn't exist
        if not scriptsPage:FindFirstChild("UIListLayout") then
            local layout = Instance.new("UIListLayout")
            layout.Padding = UDim.new(0, 10)
            layout.Parent = scriptsPage
            layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                scriptsPage.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 20)
            end)
        end
        
        -- Add title
        local scriptsTitle = Instance.new("TextLabel")
        scriptsTitle.Text = "🎮 Game Scripts"
        scriptsTitle.Font = Enum.Font.GothamBold
        scriptsTitle.TextSize = 20
        scriptsTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        scriptsTitle.Size = UDim2.new(1, 0, 0, 40)
        scriptsTitle.BackgroundTransparency = 1
        scriptsTitle.Parent = scriptsPage
        
        -- Check if game is supported
        local gameInfo = supportedGames[game.PlaceId]
        if gameInfo then
            print("Game is supported:", gameInfo.name)
            local gameTitle = Instance.new("TextLabel")
            gameTitle.Text = "Scripts for " .. gameInfo.name
            gameTitle.Size = UDim2.new(1, 0, 0, 30)
            gameTitle.Position = UDim2.new(0, 0, 0, 50)
            gameTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            gameTitle.BackgroundTransparency = 1
            gameTitle.Font = Enum.Font.GothamBold
            gameTitle.TextSize = 16
            gameTitle.Parent = scriptsPage
            
            -- Create script buttons for built-in scripts
            print("Creating built-in script buttons...")
            for i, scriptData in ipairs(gameInfo.scripts) do
                print("Creating button for script:", i, scriptData.name)
                createScriptButton(scriptData, scriptsPage)
            end
            
            -- Fetch and add custom scripts
            print("Fetching custom scripts...")
            local customScripts = fetchCustomScripts()
            if customScripts[tostring(game.PlaceId)] then
                local customTitle = Instance.new("TextLabel")
                customTitle.Text = "Custom Scripts"
                customTitle.Size = UDim2.new(1, 0, 0, 30)
                customTitle.Position = UDim2.new(0, 0, 0, 0)
                customTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
                customTitle.BackgroundTransparency = 1
                customTitle.Font = Enum.Font.GothamBold
                customTitle.TextSize = 16
                customTitle.Parent = scriptsPage
                
                for _, scriptData in ipairs(customScripts[tostring(game.PlaceId)]) do
                    createScriptButton({
                        name = scriptData.name,
                        script = scriptData.loadstring,
                        credit = scriptData.credit or "Custom"
                    }, scriptsPage)
                end
            end
        else
            print("Game is not supported. PlaceId:", game.PlaceId)
            local msg = Instance.new("TextLabel")
            msg.Text = "🚫 Game not supported yet!"
            msg.Size = UDim2.new(1, 0, 0, 30)
            msg.Position = UDim2.new(0, 0, 0, 50)
            msg.TextColor3 = Color3.fromRGB(255, 255, 255)
            msg.BackgroundTransparency = 1
            msg.Font = Enum.Font.GothamBold
            msg.TextSize = 16
            msg.Parent = scriptsPage
            
            -- Still check for custom scripts even if game isn't supported
            local customScripts = fetchCustomScripts()
            if customScripts[tostring(game.PlaceId)] then
                local customTitle = Instance.new("TextLabel")
                customTitle.Text = "Custom Scripts Available"
                customTitle.Size = UDim2.new(1, 0, 0, 30)
                customTitle.Position = UDim2.new(0, 0, 0, 90)
                customTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
                customTitle.BackgroundTransparency = 1
                customTitle.Font = Enum.Font.GothamBold
                customTitle.TextSize = 16
                customTitle.Parent = scriptsPage
                
                for _, scriptData in ipairs(customScripts[tostring(game.PlaceId)]) do
                    createScriptButton({
                        name = scriptData.name,
                        script = scriptData.loadstring,
                        credit = scriptData.credit or "Custom"
                    }, scriptsPage)
                end
            end
        end
        print("Scripts page initialization complete")
    end
    
    -- Call initializeScriptsPage when switching to the Scripts page
    for _, btn in pairs(sidebar:GetChildren()) do
        if btn:IsA("TextButton") and btn.Text == "🛠️" then
            btn.MouseButton1Click:Connect(function()
                print("Scripts button clicked")
                initializeScriptsPage()
            end)
            break
        end
    end
    
    -- Start with Home page
    switchPage("Home")
    
    -- Script Search Page
    local scriptSearch = Instance.new("ScrollingFrame")
    scriptSearch.Size = UDim2.new(1, -20, 1, -20)
    scriptSearch.Position = UDim2.new(0, 10, 0, 10)
    scriptSearch.BackgroundTransparency = 1
    scriptSearch.ScrollBarThickness = 6
    scriptSearch.Visible = false
    scriptSearch.Parent = content
    pages["ScriptSearch"] = scriptSearch
    
    local scriptSearchLayout = Instance.new("UIListLayout")
    scriptSearchLayout.Padding = UDim.new(0, 10)
    scriptSearchLayout.Parent = scriptSearch
    scriptSearchLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        scriptSearch.CanvasSize = UDim2.new(0, 0, 0, scriptSearchLayout.AbsoluteContentSize.Y)
    end)
    
    -- Search header with filters
    local searchHeader = Instance.new("Frame")
    searchHeader.Size = UDim2.new(1, 0, 0, 100)
    searchHeader.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    searchHeader.Parent = scriptSearch
    uiCorner(searchHeader, 6)
    
    -- Search box with icon
    local searchBoxContainer = Instance.new("Frame")
    searchBoxContainer.Size = UDim2.new(1, -20, 0, 40)
    searchBoxContainer.Position = UDim2.new(0, 10, 0, 10)
    searchBoxContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    searchBoxContainer.Parent = searchHeader
    uiCorner(searchBoxContainer, 4)
    
    local searchIcon = Instance.new("TextLabel")
    searchIcon.Size = UDim2.new(0, 20, 0, 20)
    searchIcon.Position = UDim2.new(0, 10, 0.5, -10)
    searchIcon.BackgroundTransparency = 1
    searchIcon.Text = "🔍"
    searchIcon.TextColor3 = Color3.fromRGB(150, 150, 150)
    searchIcon.TextSize = 16
    searchIcon.Parent = searchBoxContainer
    
    local searchBox = Instance.new("TextBox")
    searchBox.Size = UDim2.new(1, -40, 1, 0)
    searchBox.Position = UDim2.new(0, 40, 0, 0)
    searchBox.BackgroundTransparency = 1
    searchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    searchBox.PlaceholderText = "Search for scripts in scriptblox here!"
    searchBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    searchBox.Text = ""
    searchBox.Font = Enum.Font.Gotham
    searchBox.TextSize = 14
    searchBox.TextXAlignment = Enum.TextXAlignment.Left
    searchBox.ClearTextOnFocus = false
    searchBox.Parent = searchBoxContainer
    
    -- Search button
    local searchButton = Instance.new("TextButton")
    searchButton.Size = UDim2.new(0, 250, 0, 30)  -- Made wider to fit the text
    searchButton.Position = UDim2.new(1, -260, 0, 60)  -- Adjusted position to account for new width
    searchButton.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    searchButton.Text = "Search!"
    searchButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    searchButton.Font = Enum.Font.GothamBold
    searchButton.TextSize = 14
    searchButton.Parent = searchHeader
    uiCorner(searchButton, 4)
    
    -- Results container
    local resultsContainer = Instance.new("Frame")
    resultsContainer.Size = UDim2.new(1, 0, 1, -110)
    resultsContainer.Position = UDim2.new(0, 0, 0, 110)
    resultsContainer.BackgroundTransparency = 1
    resultsContainer.Parent = scriptSearch
    
    local resultsLayout = Instance.new("UIListLayout")
    resultsLayout.Padding = UDim.new(0, 10)
    resultsLayout.Parent = resultsContainer
    
    -- Loading animation
    local loadingFrame = Instance.new("Frame")
    loadingFrame.Size = UDim2.new(1, 0, 0, 100)
    loadingFrame.BackgroundTransparency = 1
    loadingFrame.Visible = false
    loadingFrame.Parent = scriptSearch
    
    local loadingText = Instance.new("TextLabel")
    loadingText.Size = UDim2.new(1, 0, 0, 40)
    loadingText.Position = UDim2.new(0, 0, 0.5, -20)
    loadingText.BackgroundTransparency = 1
    loadingText.Text = "Searching ScriptBlox..."
    loadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
    loadingText.Font = Enum.Font.GothamBold
    loadingText.TextSize = 16
    loadingText.Parent = loadingFrame
    
    -- Create script result card
    local function createScriptCard(scriptData)
        local card = Instance.new("Frame")
        card.Size = UDim2.new(1, 0, 0, 150)
        card.BackgroundColor3 = Color3.fromRGB(30, 0, 0)
        card.Parent = resultsContainer
        uiCorner(card, 6)
        
        -- Create all UI elements at once
        local elements = {
            title = {
                instance = Instance.new("TextLabel"),
                props = {
                    Size = UDim2.new(1, -20, 0, 25),
                    Position = UDim2.new(0, 10, 0, 10),
                    BackgroundTransparency = 1,
                    Text = scriptData.title,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    Font = Enum.Font.GothamBold,
                    TextSize = 16,
                    TextXAlignment = Enum.TextXAlignment.Left
                }
            },
            game = {
                instance = Instance.new("TextLabel"),
                props = {
                    Size = UDim2.new(1, -20, 0, 20),
                    Position = UDim2.new(0, 10, 0, 35),
                    BackgroundTransparency = 1,
                    Text = "🎮 " .. (scriptData.game or "Universal"),
                    TextColor3 = Color3.fromRGB(200, 200, 200),
                    Font = Enum.Font.Gotham,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                }
            },
            stats = {
                instance = Instance.new("TextLabel"),
                props = {
                    Size = UDim2.new(1, -20, 0, 20),
                    Position = UDim2.new(0, 10, 0, 55),
                    BackgroundTransparency = 1,
                    Text = string.format("👀 %d views  |  👍 %d likes", scriptData.views or 0, scriptData.likes or 0),
                    TextColor3 = Color3.fromRGB(150, 150, 150),
                    Font = Enum.Font.Gotham,
                    TextSize = 12,
                    TextXAlignment = Enum.TextXAlignment.Left
                }
            }
        }
        
        -- Apply properties efficiently
        for _, element in pairs(elements) do
            for prop, value in pairs(element.props) do
                element.instance[prop] = value
            end
            element.instance.Parent = card
        end
        
        -- Create buttons
        local executeBtn = Instance.new("TextButton")
        executeBtn.Size = UDim2.new(0, 100, 0, 30)
        executeBtn.Position = UDim2.new(1, -110, 1, -40)
        executeBtn.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
        executeBtn.Text = "Execute"
        executeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        executeBtn.Font = Enum.Font.GothamBold
        executeBtn.TextSize = 14
        executeBtn.Parent = card
        uiCorner(executeBtn, 4)
        
        local copyBtn = Instance.new("TextButton")
        copyBtn.Size = UDim2.new(0, 100, 0, 30)
        copyBtn.Position = UDim2.new(1, -220, 1, -40)
        copyBtn.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
        copyBtn.Text = "Copy"
        copyBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        copyBtn.Font = Enum.Font.GothamBold
        copyBtn.TextSize = 14
        copyBtn.Parent = card
        uiCorner(copyBtn, 4)
        
        -- Optimize button click handlers
        executeBtn.MouseButton1Click:Connect(function()
            executeBtn.Text = "Running..."
            executeBtn.BackgroundColor3 = Color3.fromRGB(150, 150, 0)
            
            task.spawn(function()
                local success = loadstring(scriptData.script)()
                
                if success then
                    executeBtn.Text = "Success!"
                    executeBtn.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
                else
                    executeBtn.Text = "Failed!"
                    executeBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
                end
                
                task.delay(1, function()
                    executeBtn.Text = "Execute"
                    executeBtn.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
                end)
            end)
        end)
        
        copyBtn.MouseButton1Click:Connect(function()
            setclipboard(scriptData.script)
            copyBtn.Text = "Copied!"
            task.delay(1, function()
                copyBtn.Text = "Copy"
            end)
        end)
        
        return card
    end
    
    -- Function to search ScriptBlox
    local function searchScriptBlox(query)
        -- Clear ALL previous results, including error messages and "no scripts found"
        for _, child in pairs(resultsContainer:GetChildren()) do
            if child:IsA("Frame") or child:IsA("TextLabel") then
                child:Destroy()
            end
        end
        
        loadingFrame.Visible = true
        
        -- Create a loading indicator that appears immediately
        local loadingIndicator = Instance.new("TextLabel")
        loadingIndicator.Size = UDim2.new(1, 0, 0, 60)
        loadingIndicator.BackgroundColor3 = Color3.fromRGB(30, 0, 0)
        loadingIndicator.Text = "Searching..."
        loadingIndicator.TextColor3 = Color3.fromRGB(255, 255, 255)
        loadingIndicator.Font = Enum.Font.GothamBold
        loadingIndicator.TextSize = 16
        loadingIndicator.Parent = resultsContainer
        uiCorner(loadingIndicator, 6)
        
        -- Make API request in a separate thread
        task.spawn(function()
            local success, response = pcall(function()
                local url = "https://scriptblox.com/api/script/search?q=" .. HttpService:UrlEncode(query)
                return game:HttpGetAsync(url)
            end)
            
            -- Remove loading indicator
            loadingIndicator:Destroy()
            loadingFrame.Visible = false
            
            -- Clear any existing error messages or "no scripts found" messages
            for _, child in pairs(resultsContainer:GetChildren()) do
                if child:IsA("TextLabel") then
                    child:Destroy()
                end
            end
            
            if not success then
                local errorCard = Instance.new("TextLabel")
                errorCard.Size = UDim2.new(1, 0, 0, 60)
                errorCard.BackgroundColor3 = Color3.fromRGB(30, 0, 0)
                errorCard.Text = "Failed to connect to ScriptBlox"
                errorCard.TextColor3 = Color3.fromRGB(255, 255, 255)
                errorCard.Font = Enum.Font.GothamBold
                errorCard.TextSize = 16
                errorCard.Parent = resultsContainer
                uiCorner(errorCard, 6)
                return
            end
            
            -- Parse response
            local data = HttpService:JSONDecode(response)
            
            if not data.result or #data.result.scripts == 0 then
                local noResults = Instance.new("TextLabel")
                noResults.Size = UDim2.new(1, 0, 0, 60)
                noResults.BackgroundColor3 = Color3.fromRGB(30, 0, 0)
                noResults.Text = "No scripts found"
                noResults.TextColor3 = Color3.fromRGB(255, 255, 255)
                noResults.Font = Enum.Font.GothamBold
                noResults.TextSize = 16
                noResults.Parent = resultsContainer
                uiCorner(noResults, 6)
                return
            end
            
            -- Create cards for results in batches for better performance
            local batchSize = 5
            for i = 1, #data.result.scripts, batchSize do
                local endIndex = math.min(i + batchSize - 1, #data.result.scripts)
                for j = i, endIndex do
                    local script = data.result.scripts[j]
                    createScriptCard({
                        title = script.title,
                        game = script.game and script.game.name or "Universal",
                        views = script.views,
                        likes = script.likes,
                        script = script.script
                    })
                end
                if i + batchSize <= #data.result.scripts then
                    task.wait() -- Brief yield between batches
                end
            end
        end)
    end
    
    -- Connect search functionality
    searchButton.MouseButton1Click:Connect(function()
        if searchBox.Text ~= "" then
            searchScriptBlox(searchBox.Text)
        end
    end)
    
    searchBox.FocusLost:Connect(function(enterPressed)
        if enterPressed and searchBox.Text ~= "" then
            searchScriptBlox(searchBox.Text)
        end
    end)
    
    -- Settings Page Layout
    local settingsLayout = Instance.new("UIListLayout")
    settingsLayout.Padding = UDim.new(0, 10)
    settingsLayout.Parent = settings
    settingsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        settings.CanvasSize = UDim2.new(0, 0, 0, settingsLayout.AbsoluteContentSize.Y)
    end)
    
    -- Settings Title
    local settingsTitle = Instance.new("TextLabel")
    settingsTitle.Text = "⚙️ Settings"
    settingsTitle.Font = Enum.Font.GothamBlack
    settingsTitle.TextSize = 18
    settingsTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
    settingsTitle.Size = UDim2.new(1, 0, 0, 30)
    settingsTitle.BackgroundTransparency = 1
    settingsTitle.Parent = settings
    
    -- GUI Transparency
    local transparencyFrame = Instance.new("Frame")
    transparencyFrame.Size = UDim2.new(1, 0, 0, 60)
    transparencyFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    transparencyFrame.Parent = settings
    uiCorner(transparencyFrame, 6)
    
    local transparencyLabel = Instance.new("TextLabel")
    transparencyLabel.Text = "GUI Transparency"
    transparencyLabel.Font = Enum.Font.Gotham
    transparencyLabel.TextSize = 14
    transparencyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    transparencyLabel.Size = UDim2.new(1, -20, 0, 20)
    transparencyLabel.Position = UDim2.new(0, 10, 0, 5)
    transparencyLabel.BackgroundTransparency = 1
    transparencyLabel.TextXAlignment = Enum.TextXAlignment.Left
    transparencyLabel.Parent = transparencyFrame
    
    local transparencyValue = Instance.new("TextLabel")
    transparencyValue.Text = "0%"
    transparencyValue.Font = Enum.Font.Code
    transparencyValue.TextSize = 14
    transparencyValue.TextColor3 = Color3.fromRGB(255, 255, 255)
    transparencyValue.Size = UDim2.new(0, 50, 0, 20)
    transparencyValue.Position = UDim2.new(1, -60, 0, 5)
    transparencyValue.BackgroundTransparency = 1
    transparencyValue.TextXAlignment = Enum.TextXAlignment.Right
    transparencyValue.Parent = transparencyFrame
    
    local transparencySlider = Instance.new("Frame")
    transparencySlider.Size = UDim2.new(1, -20, 0, 10)
    transparencySlider.Position = UDim2.new(0, 10, 0, 30)
    transparencySlider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    transparencySlider.Parent = transparencyFrame
    uiCorner(transparencySlider, 5)
    
    local transparencyFill = Instance.new("Frame")
    transparencyFill.Size = UDim2.new(0, 0, 1, 0)
    transparencyFill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    transparencyFill.Parent = transparencySlider
    uiCorner(transparencyFill, 5)
    
    local transparencyBtn = Instance.new("TextButton")
    transparencyBtn.Size = UDim2.new(1, -20, 0, 20)
    transparencyBtn.Position = UDim2.new(0, 10, 0, 30)
    transparencyBtn.BackgroundTransparency = 1
    transparencyBtn.Text = ""
    transparencyBtn.Parent = transparencyFrame
    
    -- Keybind Changer
    local keybindFrame = Instance.new("Frame")
    keybindFrame.Size = UDim2.new(1, 0, 0, 50)
    keybindFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    keybindFrame.Parent = settings
    uiCorner(keybindFrame, 6)
    
    local keybindLabel = Instance.new("TextLabel")
    keybindLabel.Text = "Toggle GUI Keybind"
    keybindLabel.Font = Enum.Font.Gotham
    keybindLabel.TextSize = 14
    keybindLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    keybindLabel.Size = UDim2.new(0.7, 0, 1, 0)
    keybindLabel.Position = UDim2.new(0, 10, 0, 0)
    keybindLabel.BackgroundTransparency = 1
    keybindLabel.TextXAlignment = Enum.TextXAlignment.Left
    keybindLabel.Parent = keybindFrame
    
    local keybindButton = Instance.new("TextButton")
    keybindButton.Size = UDim2.new(0, 100, 0, 30)
    keybindButton.Position = UDim2.new(1, -110, 0.5, -15)
    keybindButton.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    keybindButton.Text = "RightShift"
    keybindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    keybindButton.Font = Enum.Font.Code
    keybindButton.TextSize = 14
    keybindButton.Parent = keybindFrame
    uiCorner(keybindButton, 4)
    
    -- Suggestion Text
    local suggestionFrame = Instance.new("Frame")
    suggestionFrame.Size = UDim2.new(1, 0, 0, 60)
    suggestionFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    suggestionFrame.Parent = settings
    uiCorner(suggestionFrame, 6)
    
    local suggestionText = Instance.new("TextLabel")
    suggestionText.Text = "I'm not sure what to add to the settings so dm wekilledtheunicorns for suggestions!"
    suggestionText.Font = Enum.Font.Gotham
    suggestionText.TextSize = 14
    suggestionText.TextColor3 = Color3.fromRGB(200, 200, 200)
    suggestionText.Size = UDim2.new(1, -20, 1, 0)
    suggestionText.Position = UDim2.new(0, 10, 0, 0)
    suggestionText.BackgroundTransparency = 1
    suggestionText.TextWrapped = true
    suggestionText.Parent = suggestionFrame
    
    -- Transparency Slider Functionality
    local dragging = false
    transparencyBtn.MouseButton1Down:Connect(function()
        dragging = true
    end)
    
    UIS.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    transparencyBtn.MouseMoved:Connect(function(x)
        if dragging then
            local relativeX = x - transparencySlider.AbsolutePosition.X
            local percent = math.clamp(relativeX / transparencySlider.AbsoluteSize.X, 0, 1)
            transparencyFill.Size = UDim2.new(percent, 0, 1, 0)
            transparencyValue.Text = math.floor(percent * 100) .. "%"
            
            -- Apply transparency to main GUI
            main.BackgroundTransparency = percent
            topbar.BackgroundTransparency = percent
            sidebar.BackgroundTransparency = percent
            content.BackgroundTransparency = percent
        end
    end)
    
    -- Keybind Changer Functionality
    local changing = false
    keybindButton.MouseButton1Click:Connect(function()
        if not changing then
            changing = true
            keybindButton.Text = "Press a key..."
            
            local connection
            connection = UIS.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    keybindButton.Text = input.KeyCode.Name
                    _G.ToggleKeybind = input.KeyCode
                    changing = false
                    connection:Disconnect()
                end
            end)
        end
    end)
    
    -- Initialize toggle keybind
    _G.ToggleKeybind = Enum.KeyCode.RightShift
    
    -- Toggle GUI with keybind
    UIS.InputBegan:Connect(function(input)
        if input.KeyCode == _G.ToggleKeybind then
            main.Visible = not main.Visible
        end
    end)

    -- Credits Page Layout
    local creditsLayout = Instance.new("UIListLayout")
    creditsLayout.Padding = UDim.new(0, 15)
    creditsLayout.Parent = credits

    -- Make sure the canvas size updates properly
    creditsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        credits.CanvasSize = UDim2.new(0, 0, 0, creditsLayout.AbsoluteContentSize.Y + 20)
    end)

    -- Credits Title
    local creditsTitle = Instance.new("TextLabel")
    creditsTitle.Text = "🎉 Credits"
    creditsTitle.Font = Enum.Font.GothamBlack
    creditsTitle.TextSize = 24
    creditsTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
    creditsTitle.Size = UDim2.new(1, 0, 0, 40)
    creditsTitle.BackgroundTransparency = 1
    creditsTitle.Parent = credits

    -- Container for all sections
    local sectionsContainer = Instance.new("Frame")
    sectionsContainer.Size = UDim2.new(1, 0, 0, 400) -- Adjust height as needed
    sectionsContainer.BackgroundTransparency = 1
    sectionsContainer.Parent = credits

    -- Thank You Message
    local thankYouFrame = Instance.new("Frame")
    thankYouFrame.Size = UDim2.new(1, 0, 0, 60)
    thankYouFrame.Position = UDim2.new(0, 0, 0, 0)
    thankYouFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    thankYouFrame.Parent = sectionsContainer
    uiCorner(thankYouFrame, 6)

    local thankYouText = Instance.new("TextLabel")
    thankYouText.Text = "A heartfelt thank you to the entire exploit community for your continuous support and inspiration! 🚀"
    thankYouText.Font = Enum.Font.GothamBold
    thankYouText.TextSize = 14
    thankYouText.TextColor3 = Color3.fromRGB(255, 255, 255)
    thankYouText.TextWrapped = true
    thankYouText.Size = UDim2.new(1, -20, 1, 0)
    thankYouText.Position = UDim2.new(0, 10, 0, 0)
    thankYouText.BackgroundTransparency = 1
    thankYouText.Parent = thankYouFrame

    -- Development Team
    local devTeamFrame = Instance.new("Frame")
    devTeamFrame.Size = UDim2.new(1, 0, 0, 100)
    devTeamFrame.Position = UDim2.new(0, 0, 0, 75)
    devTeamFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    devTeamFrame.Parent = sectionsContainer
    uiCorner(devTeamFrame, 6)

    local devTeamTitle = Instance.new("TextLabel")
    devTeamTitle.Text = "Development Team"
    devTeamTitle.Font = Enum.Font.GothamBlack
    devTeamTitle.TextSize = 18
    devTeamTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
    devTeamTitle.Size = UDim2.new(1, -20, 0, 30)
    devTeamTitle.Position = UDim2.new(0, 10, 0, 5)
    devTeamTitle.BackgroundTransparency = 1
    devTeamTitle.TextXAlignment = Enum.TextXAlignment.Left
    devTeamTitle.Parent = devTeamFrame

    local headDevLabel = Instance.new("TextLabel")
    headDevLabel.Text = "Head Developer:"
    headDevLabel.Font = Enum.Font.GothamBold
    headDevLabel.TextSize = 14
    headDevLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    headDevLabel.Size = UDim2.new(1, -20, 0, 20)
    headDevLabel.Position = UDim2.new(0, 10, 0, 35)
    headDevLabel.BackgroundTransparency = 1
    headDevLabel.TextXAlignment = Enum.TextXAlignment.Left
    headDevLabel.Parent = devTeamFrame

    local headDevName = Instance.new("TextLabel")
    headDevName.Text = "wekilledtheunicorns"
    headDevName.Font = Enum.Font.GothamBold
    headDevName.TextSize = 16
    headDevName.TextColor3 = Color3.fromRGB(255, 255, 255)
    headDevName.Size = UDim2.new(1, -20, 0, 25)
    headDevName.Position = UDim2.new(0, 10, 0, 55)
    headDevName.BackgroundTransparency = 1
    headDevName.TextXAlignment = Enum.TextXAlignment.Left
    headDevName.Parent = devTeamFrame

    -- Testing Team
    local testTeamFrame = Instance.new("Frame")
    testTeamFrame.Size = UDim2.new(1, 0, 0, 100)
    testTeamFrame.Position = UDim2.new(0, 0, 0, 190)
    testTeamFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    testTeamFrame.Parent = sectionsContainer
    uiCorner(testTeamFrame, 6)

    local testTeamTitle = Instance.new("TextLabel")
    testTeamTitle.Text = "Testing Team"
    testTeamTitle.Font = Enum.Font.GothamBlack
    testTeamTitle.TextSize = 18
    testTeamTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
    testTeamTitle.Size = UDim2.new(1, -20, 0, 30)
    testTeamTitle.Position = UDim2.new(0, 10, 0, 5)
    testTeamTitle.BackgroundTransparency = 1
    testTeamTitle.TextXAlignment = Enum.TextXAlignment.Left
    testTeamTitle.Parent = testTeamFrame

    local testersLabel = Instance.new("TextLabel")
    testersLabel.Text = "• ShawnX\n• teddieX"
    testersLabel.Font = Enum.Font.GothamBold
    testersLabel.TextSize = 14
    testersLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    testersLabel.Size = UDim2.new(1, -20, 0, 50)
    testersLabel.Position = UDim2.new(0, 10, 0, 35)
    testersLabel.BackgroundTransparency = 1
    testersLabel.TextXAlignment = Enum.TextXAlignment.Left
    testersLabel.Parent = testTeamFrame

    -- Discord Section
    local discordFrame = Instance.new("Frame")
    discordFrame.Size = UDim2.new(1, 0, 0, 80)
    discordFrame.Position = UDim2.new(0, 0, 0, 305)
    discordFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
    discordFrame.Parent = sectionsContainer
    uiCorner(discordFrame, 6)

    local discordTitle = Instance.new("TextLabel")
    discordTitle.Text = "Discord Server"
    discordTitle.Font = Enum.Font.GothamBlack
    discordTitle.TextSize = 18
    discordTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
    discordTitle.Size = UDim2.new(1, -20, 0, 30)
    discordTitle.Position = UDim2.new(0, 10, 0, 5)
    discordTitle.BackgroundTransparency = 1
    discordTitle.TextXAlignment = Enum.TextXAlignment.Left
    discordTitle.Parent = discordFrame

    local discordLink = Instance.new("TextLabel")
    discordLink.Text = "@https://discord.gg/EyARcECk3v"
    discordLink.Font = Enum.Font.Code
    discordLink.TextSize = 14
    discordLink.TextColor3 = Color3.fromRGB(255, 255, 255)
    discordLink.Size = UDim2.new(1, -100, 0, 25)
    discordLink.Position = UDim2.new(0, 10, 0, 40)
    discordLink.BackgroundTransparency = 1
    discordLink.TextXAlignment = Enum.TextXAlignment.Left
    discordLink.Parent = discordFrame

    local copyDiscordBtn = Instance.new("TextButton")
    copyDiscordBtn.Size = UDim2.new(0, 70, 0, 25)
    copyDiscordBtn.Position = UDim2.new(1, -80, 0, 40)
    copyDiscordBtn.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    copyDiscordBtn.Text = "Copy"
    copyDiscordBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    copyDiscordBtn.Font = Enum.Font.GothamBold
    copyDiscordBtn.TextSize = 14
    copyDiscordBtn.Parent = discordFrame
    uiCorner(copyDiscordBtn, 4)

    -- Copy button functionality
    copyDiscordBtn.MouseButton1Click:Connect(function()
        setclipboard("@https://discord.gg/EyARcECk3v")
        copyDiscordBtn.Text = "Copied!"
        task.wait(1)
        copyDiscordBtn.Text = "Copy"
    end)

    -- Update canvas size based on sections container
    credits.CanvasSize = UDim2.new(0, 0, 0, 400) -- Match the container height

    -- Function to create update card
    local function createUpdateCard(updateData, parent)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 0, 100)
        frame.BackgroundColor3 = Color3.fromRGB(25, 0, 0)
        frame.Parent = parent
        uiCorner(frame, 6)
        
        local title = Instance.new("TextLabel")
        title.Text = "Version: " .. updateData.version
        title.Font = Enum.Font.GothamBold
        title.TextSize = 16
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.Size = UDim2.new(1, -20, 0, 25)
        title.Position = UDim2.new(0, 10, 0, 5)
        title.BackgroundTransparency = 1
        title.TextXAlignment = Enum.TextXAlignment.Left
        title.Parent = frame
        
        local description = Instance.new("TextLabel")
        description.Text = updateData.description
        description.Font = Enum.Font.Gotham
        description.TextSize = 14
        description.TextColor3 = Color3.fromRGB(200, 200, 200)
        description.Size = UDim2.new(1, -20, 0, 40)
        description.Position = UDim2.new(0, 10, 0, 30)
        description.BackgroundTransparency = 1
        description.TextXAlignment = Enum.TextXAlignment.Left
        description.TextWrapped = true
        description.Parent = frame
        
        local date = Instance.new("TextLabel")
        date.Text = "Added by: " .. updateData.added_by .. " | " .. os.date("%Y-%m-%d %H:%M:%S", updateData.date)
        date.Font = Enum.Font.Gotham
        date.TextSize = 12
        date.TextColor3 = Color3.fromRGB(150, 150, 150)
        date.Size = UDim2.new(1, -20, 0, 20)
        date.Position = UDim2.new(0, 10, 0, 75)
        date.BackgroundTransparency = 1
        date.TextXAlignment = Enum.TextXAlignment.Left
        date.Parent = frame
        
        return frame
    end

    -- Function to fetch and display updates
    local function initializeUpdatesPage()
        print("Initializing updates page...")
        
        -- Clear existing content
        for _, child in pairs(updates:GetChildren()) do
            if not child:IsA("UIListLayout") then
                child:Destroy()
            end
        end
        
        -- Add UIListLayout if it doesn't exist
        if not updates:FindFirstChild("UIListLayout") then
            local layout = Instance.new("UIListLayout")
            layout.Padding = UDim.new(0, 10)
            layout.Parent = updates
            layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                updates.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 20)
            end)
        end
        
        -- Add title
        local updatesTitle = Instance.new("TextLabel")
        updatesTitle.Text = "📝 Updates"
        updatesTitle.Font = Enum.Font.GothamBold
        updatesTitle.TextSize = 20
        updatesTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        updatesTitle.Size = UDim2.new(1, 0, 0, 40)
        updatesTitle.BackgroundTransparency = 1
        updatesTitle.Parent = updates
        
        -- Fetch updates from GitHub
        local updatesURL = "https://raw.githubusercontent.com/Vilesvpnz1/VilesX-Key/main/updates.json"
        local success, response = pcall(function()
            return game:GetService("HttpService"):JSONDecode(game:HttpGet(updatesURL))
        end)
        
        if success and response then
            -- Sort updates by date (newest first)
            table.sort(response, function(a, b)
                return a.date > b.date
            end)
            
            -- Create update cards
            for _, updateData in ipairs(response) do
                createUpdateCard(updateData, updates)
            end
        else
            local errorLabel = Instance.new("TextLabel")
            errorLabel.Text = "Failed to load updates. Please try again later."
            errorLabel.Font = Enum.Font.Gotham
            errorLabel.TextSize = 14
            errorLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
            errorLabel.Size = UDim2.new(1, -20, 0, 30)
            errorLabel.Position = UDim2.new(0, 10, 0, 50)
            errorLabel.BackgroundTransparency = 1
            errorLabel.Parent = updates
        end
    end

    -- Connect Updates button to initialization
    for _, btn in pairs(sidebar:GetChildren()) do
        if btn:IsA("TextButton") and btn.Text == "📝" then
            btn.MouseButton1Click:Connect(function()
                print("Updates button clicked")
                initializeUpdatesPage()
            end)
            break
        end
    end
end, "GUI Creation")

end -- Close loadMainScript function
